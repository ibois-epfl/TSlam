
/*
#include <list>
#include <fstream>
#include <opencv2/imgproc/imgproc.hpp>
#include <aruco/markermap.h>
#include "utils/system.h"
#include "basictypes/misc.h"
#include "basictypes/debug.h"
#include "basictypes/timers.h"
#include "optimization/pnpsolver.h"
#include "optimization/globaloptimizer.h"
#include "optimization/ippe.h"
#include "basictypes/io_utils.h"
#include "map_types/keyframedatabase.h"
#include "utils/mapinitializer.h"
#include "utils/mapmanager.h"
#include "map.h"
#include "basictypes/se3.h"
#include "basictypes/osadapter.h"
#include "map_types/covisgraph.h"
#include "utils/frameextractor.h"
#include "basictypes/hash.h"

// # 1 "/app/example.cpp"
// # 1 "/app//"
// # 1 "<built-in>"
// # 1 "<command-line>"
// # 1 "/usr/include/stdc-predef.h" 1 3 4
// # 1 "<command-line>" 2
// # 1 "/app/example.cpp"
// # 634 "/app/example.cpp"
 namespace

     reslam {

   Params System ::

_16805773490000196330 ;

   Params & System ::

  getParams ()
     { return _16805773490000196330 ;

        }

    uint32_t

       System :: getCurrentKeyFrameIndex ()

     {

  return _17510502251974591806 ;

    }

   std ::
       shared_ptr <

 Map >

 System ::

getMap () {
     return _10762543579000176710 ;

    }

System ::

System (
       std ::

    shared_ptr <

       reslam ::
     MarkerDetector > _1516358670470627782 )

  {

    _6644573796688729791 =

   std ::

 make_shared < FrameExtractor >
 ()

  ;

     _11449928097377700216 = std :: make_shared < MapInitializer >();
     _9141803538300908158 = std ::make_shared < MapManager > ();

      if(

 !
       _1516358670470627782 )

         _1508819710414606447 =

 std ::

     make_shared <
   reslam ::

   STagDetector >

  ()
    ;
      else

   _1508819710414606447 =

    _1516358670470627782 ;
 }

System ::

     ~ System ()

  {

    waitForFinished ()
       ;

 }

 void

    System ::

   _13127964322113574845 ()

  {

    _16805773490000196330.nthreads_feature_detector = max ( 1,_16805773490000196330.nthreads_feature_detector )

      ;

    std ::
  shared_ptr <

  Feature2DSerializable >
    _15583457929083796945 =

     Feature2DSerializable ::
    create (
  _16805773490000196330.kpDescriptorType )

    ;
    _15583457929083796945 ->

 setParams (
   _16805773490000196330.extraParams )

        ;

    _16805773490000196330.maxDescDistance =

  _15583457929083796945 ->

   getMinDescDistance ()

 ;

    _6644573796688729791 ->
       setParams (
     _15583457929083796945, _16805773490000196330,_1508819710414606447 )
     ;

    _6644573796688729791 ->

 removeFromMarkers ()

 =
       _16805773490000196330.removeKeyPointsIntoMarkers ;

    _6644573796688729791 ->

detectMarkers ()

 =

   _16805773490000196330.detectMarkers ;

    _6644573796688729791 ->

         detectKeyPoints ()

     =

    _16805773490000196330.detectKeyPoints ;

 }

 void

 System ::

 setParams (

     std ::
      shared_ptr <

Map >

    _11093822290287, const Params &_2654435881,const string &_4953871428288621283,std ::

    shared_ptr <

reslam ::

    MarkerDetector >

 _1516358670470627782 )

   {

    _10762543579000176710 =
 _11093822290287 ;

     if(
     ! _11093822290287 ->

   isEmpty ()
       )
        _11093822290287 ->

 setMapState (

    Map ::

    MODIFIED )

    ;

    _16805773490000196330 =

 _2654435881 ;

    _16805773490000196330.maxOctave =

      _10762543579000176710 ->

    _maxOctaveLevel ;

    _1508819710414606447 = _1516358670470627782 ;
     if(
       !
       _1508819710414606447 )

        _1508819710414606447 =

std ::

  make_shared <
    STagDetector >

  (

   _16805773490000196330 )

      ;

    _13127964322113574845 ()

          ;

     if
  (

      _10762543579000176710 ->
    isEmpty ()

     )

     {

        _7599632917966626906 =

        STATE_LOST ;

         if

         (

         !

     _4953871428288621283.empty ()

     )

  {

            _10762543579000176710 ->

    TheKFDataBase.loadFromFile (

  _4953871428288621283 )

    ;

         }

        MapInitializer ::

  Params _3005399798454910266 ;

         if

  (
   _16805773490000196330.forceInitializationFromMarkers )

            _3005399798454910266.mode =

MapInitializer ::

     ARUCO ;

        else
            _3005399798454910266.mode =

    MapInitializer ::

    BOTH ;

        _3005399798454910266.minDistance =

 _16805773490000196330.minBaseLine ;

        _3005399798454910266.markerSize =

         _16805773490000196330.aruco_markerSize ;

        _3005399798454910266.aruco_minerrratio_valid =
   _16805773490000196330.aruco_minerrratio_valid ;

        _3005399798454910266.allowArucoOneFrame =

      _16805773490000196330.aruco_allowOneFrameInitialization ;

        _3005399798454910266.max_makr_rep_err = 2.5 ;

        _3005399798454910266.minDescDistance =

 _16805773490000196330.maxDescDistance ;

        _11449928097377700216 ->

   setParams (

    _3005399798454910266 )

      ;

     }

    else
        _7599632917966626906 =

      STATE_LOST ;

 }

 void

 System ::

waitForFinished ()

   {

 _9141803538300908158 ->

         stop ()
 ;
 _9141803538300908158 ->
mapUpdate ()

    ;

  if( _9141803538300908158 ->

     bigChange ()

     )

   {

     _16805767570017655115.pose_f2g =

    _9141803538300908158 ->

getLastAddedKFPose ()

  ;

     _3746282635465101757 =

     _16805767570017655115.pose_f2g ;

  }

 }
// # 1329 "/app/example.cpp"
 void System ::

   resetTracker ()

 {

    waitForFinished ()

     ;

    _17510502251974591806 =

  -1 ;

    _3746282635465101757 =

  se3 ()

    ;

    _7599632917966626906 =

   STATE_LOST ;

    _16805767570017655115.clear ()
 ;

    _6731656245229539747.clear ()

     ;

    _7053670376446719714 =

  cv :: Mat ()

 ;

    _1426313296465708397 =

        -1 ;

 }

 bool

  System ::

backwardTracker (

     const cv ::
      Mat _16937226146608628963, const std ::

vector <

  cv :: Mat >

 &_6441194614667703750, const ImageParams &_18212413899834346676, uint32_t
      _9933887380370137445 )

    {

    waitForFinished ()

  ;

     if(
_16937226146608628963.empty ()

          )

         return

 false ;
     if

 (

_6441194614667703750.size ()

      ==

   1 )
        _6644573796688729791 ->

process (

        _6441194614667703750 [

      0 ]
  ,_18212413899834346676,_16805767570017655115,_9933887380370137445 )
     ;

    else {

         if( _18212413899834346676.isArray ()

     )

            _6644573796688729791 -> processArray (

_6441194614667703750,_18212413899834346676,_16805767570017655115,_9933887380370137445,_11449928097377700216 )

      ;

         else

    if

 (

   _18212413899834346676.isStereoCamera ()

  )

            _6644573796688729791 ->
   processStereo (

 _6441194614667703750 [
    0 ]
    ,_6441194614667703750 [

    1 ]

    ,_18212413899834346676,_16805767570017655115,_9933887380370137445 )
       ;

     }

    _3746282635465101757 = _16937226146608628963 ;

    _7599632917966626906 =

        STATE_TRACKING ;

    _6731656245229539747.clear ()
    ;

    _7053670376446719714 =

   cv ::

  Mat ()

       ;

    _1426313296465708397 =

     -1 ;

     return

    true ;
 }

cv ::

Mat System ::

process (
   const Frame &_46082543180066935 )

        {

     se3 _16937225862434286412 =

 _3746282635465101757 ;

     if

   (

      (

   void* )

     &_46082543180066935 !=

    (
     void* )

  &_16805767570017655115 )
    {

        swap ( _6731656245229539747,_16805767570017655115 )

     ;

        _16805767570017655115 =

   _46082543180066935 ;

     }

     if
       (

_13736188859597190254 ==

  MODE_SLAM &&

       !

_9141803538300908158 ->

hasMap ()
        )

        _9141803538300908158 ->
    setParams (

     _10762543579000176710,_16805773490000196330.enableLoopClosure )
 ;

     if

 (
      !
    _16805773490000196330.runSequential &&

   _13736188859597190254 ==

MODE_SLAM )

        _9141803538300908158 ->

   start ()
   ;

     for(
auto &_175247760135:_6731656245229539747.ids )

         if
        (

  _175247760135 !=

 std ::

         numeric_limits < uint32_t >
  :: max () )
 {

             if

       (

     !
_10762543579000176710 ->

     map_points.is (
    _175247760135 )

        ) _175247760135 =

  std ::
   numeric_limits <

  uint32_t >
   ::

  max ()

   ;

             else

      if(
  _10762543579000176710 -> map_points [

         _175247760135 ]

        .isBad ()

         )

    _175247760135 =

  std ::

numeric_limits <

    uint32_t >

        ::

 max ()

      ;

         }

     if(
 _10762543579000176710 -> isEmpty ()
    &&
      _13736188859597190254 ==

MODE_SLAM )

      {

         if

   (

         _6496374868013697966 (

_16805767570017655115 )

    )

            _7599632917966626906 =

 STATE_TRACKING ;
     }

    else {

         if(

    _7599632917966626906 ==

   STATE_TRACKING ||

   _7599632917966626906 ==

   STATE_RELOC )

   {

            _17510502251974591806 =

   _17508337877569083564 (

  _6731656245229539747,_3746282635465101757 ) ;
            _3746282635465101757 = _13245762729631011225 (

 _16805767570017655115,_3746282635465101757 )

    ;

             if(

    ! _3746282635465101757.isValid ()
        )
                _7599632917966626906 =

   STATE_LOST ;

            else
             {
                 if(

   _16805767570017655115.fseq_idx >=
       _1426313296465708397+5 )

                    _7599632917966626906 =

     STATE_TRACKING ;

             }

         }

         if

 (

  _7599632917966626906 ==
STATE_LOST )

    {

            se3 _5564636146947005941 ;
             if

        (

    _6638785117005124636 (

    _16805767570017655115,_5564636146947005941 ) )

      {

                _7599632917966626906 =

      STATE_RELOC ;

                _3746282635465101757 =

 _5564636146947005941 ;

                _17510502251974591806 = _17508337877569083564 (

  _16805767570017655115,_3746282635465101757 )

  ;

                _1426313296465708397 =
       _16805767570017655115.fseq_idx ;

             }

         }

         if(

   _7599632917966626906 ==

    STATE_TRACKING )

    {

            _16805767570017655115.pose_f2g =

_3746282635465101757 ;

             if

  (

_13736188859597190254 ==
  MODE_SLAM &&

      (

      (

       _16805767570017655115.fseq_idx >=

    _1426313296465708397+5 )

   ||
   (

_1426313296465708397 ==

 -1 )
   )

    )
               _9141803538300908158 ->

       newFrame (

         _16805767570017655115,_17510502251974591806 )
    ;

         }

     }

     if(

          _7599632917966626906 ==

       STATE_LOST &&
  _13736188859597190254 ==

     MODE_SLAM &&
    _10762543579000176710 ->

 keyframes.size ()

  <=

        5 && _10762543579000176710 -> keyframes.size ()
     !=

        0 ) {

        _9141803538300908158 ->

  reset ()

 ;

        _10762543579000176710 ->

  clear ()
       ;

        _11449928097377700216 ->

   reset ()

  ;

        _9141803538300908158 ->

        setParams (

 _10762543579000176710,_16805773490000196330.enableLoopClosure )

  ;
     }

      if

      (

 _7599632917966626906 ==

STATE_TRACKING ||

    _7599632917966626906 ==

 STATE_RELOC )

 {

        _7053670376446719714 =

    cv ::

       Mat ::

   eye (

     4,4,CV_32F )

    ;

         if
        (

 _16937225862434286412.isValid ()

    )

          {

            _7053670376446719714 =

       _3746282635465101757.convert ()
       *_16937225862434286412.convert ()
  .inv ()

 ;

          }

     }

    else {

        _7053670376446719714 =

cv ::

 Mat ()

   ;

     }

    _16805767570017655115.pose_f2g =
   _3746282635465101757 ;

     if( ++

    _16812765159998713427 >

      (

     10*4*12*34*6 )

    /2 )

        _3746282635465101757 =

       cv :: Mat ()

    ;

     if (

  _7599632917966626906 ==

   STATE_LOST )

   return cv ::

     Mat ()

     ;

    else
         return

        _3746282635465101757 ;

 }

cv::Mat System :: process ( vector <cv::Mat > &_3005401535270843804, const ImageParams &_18212413899834346676 , uint32_t _9933887380370137445 )
{
  _6644573796688729791 -> initFeatParams ( _18212413899834346676 );
  swap ( _6731656245229539747,_16805767570017655115 );
  std :: thread th ;
  if ( _13736188859597190254 == MODE_SLAM )

  th = std :: thread ( [&]() {
    if( _9141803538300908158 -> mapUpdate () ) {
      if( _9141803538300908158 -> bigChange () ) {
        _16805767570017655115.pose_f2g = _9141803538300908158 -> getLastAddedKFPose ();
        _3746282635465101757 = _9141803538300908158 -> getLastAddedKFPose () ;
      }
    }
  });

  switch ( _6291654841120756956 ) {

    case MONOCULAR:
      _6644573796688729791 -> process ( _3005401535270843804 [ 0 ] ,_18212413899834346676,_16805767570017655115,_9933887380370137445 );
      break ;

    case STEREO:
      _6644573796688729791 -> processStereo ( _3005401535270843804 [   0 ],_3005401535270843804 [1 ],_18212413899834346676,_16805767570017655115,_9933887380370137445 );
      break ;

    case RGBD:
        _6644573796688729791 ->

  process_rgbd (

   _3005401535270843804 [

       0 ]

    ,_3005401535270843804 [

     1 ]

    ,_18212413899834346676,_16805767570017655115,_9933887380370137445 ) ;

        break ;

    case ARRAY:
        _6644573796688729791 ->
       processArray (

_3005401535270843804,_18212413899834346676, _16805767570017655115, _9933887380370137445, _11449928097377700216 )

          ;

        break ;

     }

     if(
      _16805773490000196330.autoAdjustKpSensitivity )

 {

         int

      _1699599737904718822 =

   _16805773490000196330.maxFeatures-_16805767570017655115.und_kpts.size ()
      ;

         if( _1699599737904718822 >
   0 )

     {

             float

   _46082575832048655 =

     1.0f- (

  float ( _1699599737904718822 )

    /float (

_16805767570017655115.und_kpts.size ()

  )

    )

     ;

             float

 _6148074839757474704 =

     _6644573796688729791 ->

     getSensitivity ()

 +_46082575832048655 ;

            _6148074839757474704 =
     std ::
     max (

    _6148074839757474704,1.0f )

  ;

            _6644573796688729791 ->

        setSensitivity (

  _6148074839757474704 )

     ;

         }

        else {

            _6644573796688729791 ->

    setSensitivity (

      _6644573796688729791 ->
getSensitivity ()

    *0.95 )

  ;

         }

     }

     if

     (

_13736188859597190254 ==

 MODE_SLAM )

      th.join ()

 ;

    cv ::

   Mat _3005399805025936106 =

    process (

  _16805767570017655115 )
        ;

     float

    _6154865401824487276 =
      sqrt (

      float ( _16805767570017655115.imageParams.CamSize.area ()

 )

       /float (

     _3005401535270843804 [

 0 ]

.size ()

    .area ()

  ) )

      ;

    _1400008259408517257 (

 _3005401535270843804 [

     0 ]

   ,1./_6154865401824487276 )

        ;

     auto

     _5829441678613027716 =
        [

 ]

        (
const uint32_t&_11093821926013 )

  {

     std ::

         stringstream _706246330191125 ;

    _706246330191125 << _11093821926013 ;
     return _706246330191125.str ()

   ;

   } ;

    _16805777039407129681 (

 _3005401535270843804 [
   0 ]

,"\x4d\x61\x70\x20\x50\x6f\x69\x6e\x74\x73\x3a"+_5829441678613027716 (
  _10762543579000176710 ->
      map_points.size ()

    )

        ,cv ::

 Point (

20,_3005401535270843804 [

  0 ]
 .rows-20 )

      )

   ;

    _16805777039407129681 (

   _3005401535270843804 [
   0 ]

 ,"\x4d\x61\x70\x20\x4d\x61\x72\x6b\x65\x72\x73\x3a"+_5829441678613027716 (

  _10762543579000176710 ->

 map_markers.size ()

 )
   ,cv ::

  Point (
 20,_3005401535270843804 [

   0 ]
       .rows-40 )

      )

     ;

    _16805777039407129681 (

   _3005401535270843804 [

0 ]

 ,"\x4b\x65\x79\x46\x72\x61\x6d\x65\x73\x3a"+_5829441678613027716 (

 _10762543579000176710 ->

   keyframes.size ()
       )

    ,cv ::

  Point (
     20,_3005401535270843804 [

  0 ]

 .rows-60 ) )

   ;

     int

  _16937201858692939798 =

 0 ;

     for(

 auto _175247760135:_16805767570017655115.ids )

  if(

   _175247760135 != std ::
  numeric_limits <

  uint32_t >

   ::

   max ()

   ) _16937201858692939798 ++ ;

    _16805777039407129681 (

_3005401535270843804 [

      0 ] ,"\x4d\x61\x74\x63\x68\x65\x73\x3a"+ _5829441678613027716 (

       _16937201858692939798 ) ,cv ::

   Point (

       20,_3005401535270843804 [

   0 ]

     .rows-80 )

 )

    ;

     if(
 fabs (

       _6154865401824487276-1 )

    >

    1e-3 )
        _16805777039407129681 ( _3005401535270843804 [
    0 ]

  ,"\x49\x6d\x67\x2e\x53\x69\x7a\x65\x3a"+_5829441678613027716 (

    _16805767570017655115.imageParams.CamSize.width )

+"\x78"+_5829441678613027716 ( _16805767570017655115.imageParams.CamSize.height )

 ,cv ::

  Point (

         20,_3005401535270843804 [
      0 ]
      .rows-100 )

 )

   ;

     return

 _3005399805025936106 ;

 }

 void
  System :: _16805777039407129681 (

       cv ::

   Mat &_175247760140,string _706246331661728,cv ::

      Point _2654435881 )

 {

     float

    _706246308256699 =

  float (

     _175247760140.cols )

   /float (
    1280 )

      ;

    cv ::

      putText (

_175247760140,_706246331661728,_2654435881,cv ::

  FONT_HERSHEY_SIMPLEX, 0.5*_706246308256699,cv ::

Scalar (

0,0,0 )

    ,3*_706246308256699 )

 ;

    cv ::

 putText (

     _175247760140,_706246331661728,_2654435881,cv ::

    FONT_HERSHEY_SIMPLEX, 0.5*_706246308256699,cv ::
 Scalar (

    125,255,255 )

    ,1*_706246308256699 )
 ;

 }

string System ::

  getSignatureStr ()

     const {
     return

     _9727665765668901870 (

 _4661124703751533956 ()

     )

  ;

 }

uint64_t System ::

    _4661124703751533956 (

   bool _46082575779493229 )

  const {

    Hash _11093822380353 ;

    _11093822380353 +=
       _10762543579000176710 ->
       getSignature ( _46082575779493229 )

    ;

     if(
   _46082575779493229 )

   cout <<

         "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x2e\x20\x73\x69\x67\x3d" <<

_11093822380353 <<

 endl ;

    _11093822380353 +=
    _16805773490000196330.getSignature ()

   ;

     if(

_46082575779493229 )

       cout <<

    "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x32\x2e\x20\x73\x69\x67\x3d" <<

      _11093822380353 <<

   endl ;

     for(

  int _2654435874 = 0 ;

   _2654435874 <

  6 ;

_2654435874 ++

      )

 _11093822380353 +=
      _3746282635465101757 [

  _2654435874 ]
     ;

     if(

    _46082575779493229 )

cout <<
    "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x33\x2e\x20\x73\x69\x67\x3d" <<

 _11093822380353 <<

 endl ;

    _11093822380353.add (

     _17510502251974591806 )

 ;

     if(

         _46082575779493229 ) cout <<

  "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x34\x2e\x20\x73\x69\x67\x3d" <<

    _11093822380353 <<

   endl ;

    _11093822380353 +=

  _16805767570017655115.getSignature ()

       ;

     if(

_46082575779493229 )

    cout <<

     "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x35\x2e\x20\x73\x69\x67\x3d" <<

     _11093822380353 <<

 endl ;

    _11093822380353 +=
   _1227001083608564617 ;

     if(
 _46082575779493229 )
 cout <<

      "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x37\x2e\x20\x73\x69\x67\x3d" <<

_11093822380353 <<
    endl ;

    _11093822380353 += _7599632917966626906 ;

     if(

_46082575779493229 )

         cout <<
  "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x38\x2e\x20\x73\x69\x67\x3d" << _11093822380353 <<

endl ;

    _11093822380353 +=

   _13736188859597190254 ;

     if(

     _46082575779493229 )

 cout <<

  "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x39\x2e\x20\x73\x69\x67\x3d" <<
     _11093822380353 <<

    endl ;

    _11093822380353 +=

  _6731656245229539747.getSignature ()

          ;

     if(

     _46082575779493229 )
     cout <<

       "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x30\x2e\x73\x69\x67\x3d" <<

    _11093822380353 <<

endl ;

    _11093822380353 +=

 _9141803538300908158 ->

         getSignature ()

  ;

     if( _46082575779493229 )

     cout <<

"\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x31\x2e\x73\x69\x67\x3d" <<

  _11093822380353 << endl ;

    _11093822380353 +=
_7053670376446719714 ;

    _11093822380353 +=

     _1426313296465708397 ;

     if(

  _46082575779493229 )

     cout <<

    "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x32\x2e\x73\x69\x67\x3d" <<
_11093822380353 <<

  endl ;

     return

  _11093822380353 ;

 }

cv ::
      Mat System ::
      _17589686230412731881 (

 const Frame &_46082543180066935 )

 {

    std ::

vector <
   uint32_t >

          _4240939334638385660 ;

    vector <
      pair <
cv ::

   Mat,double >

      >

  _5923954032168212568 ;

    vector < cv ::
      Point3f >

  _7045032207766252521 ;

    vector <

cv ::

  Point2f >

     _7045032207766252456 ;

     for(

   auto _2654435878:_46082543180066935.markers )

  {

         if
  (

  _10762543579000176710 ->

       map_markers.find (

   _2654435878.id ) !=

     _10762543579000176710 ->
      map_markers.end ()

       )

 {

            reslam ::

 Marker &_6807036686937475945 =

    _10762543579000176710 ->

        map_markers [

   _2654435878.id ]

  ;

            cv ::

    Mat _9983235290341257781 =
     _6807036686937475945.pose_g2m ;

             auto

       _11093822296219 = _6807036686937475945.get3DPoints ()

   ;

            _7045032207766252521.insert ( _7045032207766252521.end ()

    ,_11093822296219.begin ()

    ,_11093822296219.end ()
      )
  ;

            _7045032207766252456.insert (
     _7045032207766252456.end ()

 ,_2654435878.und_corners.begin ()

  ,_2654435878.und_corners.end ()

      )

  ;

             auto

      _1515389571633683069 =

    IPPE ::

   solvePnP (
    _16805773490000196330.aruco_markerSize,_2654435878.und_corners,_46082543180066935.imageParams.CameraMatrix,_46082543180066935.imageParams.Distorsion )

 ;

             for(

      auto _16937226146608628973:_1515389571633683069 )

                _5923954032168212568.push_back (

    make_pair (

  _16937226146608628973 * _9983235290341257781.inv () ,-1 )

     )

    ;

         }

     }
     if

      (

        _7045032207766252521.size ()
 ==

      0 )

 return cv ::

Mat ()

   ;

     for(

    auto &_46082575779853237:_5923954032168212568 )

       {

        vector <
   cv ::

   Point2f >
    _1535067723848375914 ;

        se3 _16937226146609453200 =

    _46082575779853237.first ;

        project ( _7045032207766252521,_46082543180066935.imageParams.CameraMatrix,_16937226146609453200.convert ()

  ,_1535067723848375914 )

  ;

        _46082575779853237.second =

     0 ;

         for(
    size_t _2654435874 =

    0 ;
       _2654435874 <

 _1535067723848375914.size () ; _2654435874 ++

  )

            _46082575779853237.second +=

    (

  _1535067723848375914 [

     _2654435874 ]

.x- _7045032207766252456 [

  _2654435874 ]

   .x )

* (

_1535067723848375914 [

         _2654435874 ]
  .x- _7045032207766252456 [ _2654435874 ]

   .x )

+ (

       _1535067723848375914 [ _2654435874 ]

  .y- _7045032207766252456 [
  _2654435874 ]
       .y )

    * (

    _1535067723848375914 [
   _2654435874 ]

     .y- _7045032207766252456 [

  _2654435874 ]

   .y )

    ;

     }

    std ::
       sort (

     _5923954032168212568.begin ()

   ,_5923954032168212568.end ()

     , [

          ]

     (

     const pair <

   cv ::
 Mat,double >

    &_2654435866,const pair <

cv ::
 Mat,double >

    &_2654435867 )

         {
     return _2654435866.second <

 _2654435867.second ;

  }
       )

  ;

     return

 _5923954032168212568 [
 0 ]
.first ;

 }

 bool

System ::
   _6496374868013697966 (

  Frame &_175247759917 )
  {

 bool
    _11093822302335 ;

     if

    (
    _175247759917.imageParams.isStereoCamera ()

           || _175247759917.imageParams.isArray ()
     )

   {

          _11093822302335 =

 _9621206695630440219 (

       _175247759917 )

     ;

     }
    else {

        _11093822302335 =

    _650146437747778655 (

  _175247759917 )

    ;

     }

     if(
  !

    _11093822302335 )

  return _11093822302335 ;

    _3746282635465101757 =

  _10762543579000176710 ->
keyframes.back ()
      .pose_f2g ;

    _17510502251974591806 =

  _10762543579000176710 ->

keyframes.back ()

    .idx ;

    _1227001083608564617 =

true ;

   return
     true ;

 }

 bool

System ::

 _650146437747778655 (

     Frame &_175247759917 )

     {
     if

     (

     !
  _11449928097377700216 ->

 process (

        _175247759917,_10762543579000176710 )

 )

       return
       false ;

         if

     (

  _10762543579000176710 ->

   keyframes.size ()

         >

 1 &&

 _10762543579000176710 ->

map_points.size ()

 >
   0 )

    {

        _175247759917.ids =

    _10762543579000176710 ->

  keyframes.back ()

   .ids ;

     }
    globalOptimization ()
        ;

     if
   (

_10762543579000176710 ->

        map_markers.size ()
  ==
0 )

  {

         if
 (

   _10762543579000176710 ->

  map_points.size ()

         <

   50 )

      {

            _10762543579000176710 ->

  clear ()

     ;

             return
     false ;
         }

         float
       _7847018097084079275 =
   1./_10762543579000176710 ->

    getFrameMedianDepth (

   _10762543579000176710 ->

   keyframes.front ()

     .idx )
     ;

        cv ::
  Mat _706246338944062 =

    _10762543579000176710 ->

keyframes.back ()

  .pose_f2g.inv ()

  ;

        _706246338944062.col (

 3 )

   .rowRange (

    0,3 )

       =

 _706246338944062.col (

     3 )

     .rowRange (

      0,3 )

*_7847018097084079275 ;

        _10762543579000176710 ->

     keyframes.back ()

       .pose_f2g =

  _706246338944062.inv ()

 ;

          for(

auto &_175247759380:_10762543579000176710 ->

   map_points )

    {
            _175247759380.scalePoint (
    _7847018097084079275 )

 ;
         }

     }

    _3746282635465101757 =
     _10762543579000176710 ->

 keyframes.back () .pose_f2g ;

       return
 true ;

 }

 bool

    System ::
       _9621206695630440219 (

    Frame &_46082543180066935 )

  {
     if(

    _16805773490000196330.KPNonMaximaSuppresion )

        _46082543180066935.nonMaximaSuppresion ()

  ;

     int

  _8065948040949117953 =

     0 ;

     for(

   size_t _2654435874 =

    0 ;

     _2654435874 < _46082543180066935.und_kpts.size ()
 ;

         _2654435874 ++

    )

    {

         if

      (

 _46082543180066935.getDepth (

    _2654435874 )

   >
      0 &&
        _46082543180066935.imageParams.isClosePoint (

     _46082543180066935.getDepth (

_2654435874 )

     )

      &&

     !

     _46082543180066935.flags [

   _2654435874 ]

  .is (

 Frame ::

FLAG_NONMAXIMA )
   )

            _8065948040949117953 ++
   ;

     }
     if

 (

    _8065948040949117953 <
  100 )

  return

 false ;

    _46082543180066935.pose_f2g.setUnity ()

 ;

    Frame & _16997199184281837438 =

   _10762543579000176710 ->

addKeyFrame (

   _46082543180066935 )

    ;

     for(

size_t _2654435874 =

     0 ;

   _2654435874 <

 _46082543180066935.und_kpts.size ()

     ;

_2654435874 ++
 )

    {

        cv ::
    Point3f _2654435881 ;

         if
  (

      _46082543180066935.getDepth (
     _2654435874 )

     >
 0 &&

    _46082543180066935.imageParams.isClosePoint (

  _46082543180066935.getDepth (

     _2654435874 )

        ) &&

   !

  _46082543180066935.flags [

   _2654435874 ]

 .is (

Frame ::
  FLAG_NONMAXIMA )
       )

         {

            _2654435881 =
       _46082543180066935.get3dStereoPoint (

    _2654435874 )

   ;

             auto

  &_175247759380 =
       _10762543579000176710 ->

    addNewPoint (

    _16997199184281837438.fseq_idx )

      ;

            _175247759380.kfSinceAddition =

        1 ;

            _175247759380.setCoordinates (

_2654435881 )

   ;

            _175247759380.setStereo (
  true )
     ;

            _10762543579000176710 ->

   addMapPointObservation (

_175247759380.id,_16997199184281837438.idx,_2654435874 )

  ;

            _46082543180066935.ids [

 _2654435874 ]

     =
   _175247759380.id ;

         }

     }

     for(

auto &_2654435878:_46082543180066935.markers )

 {

        _2654435878.frames.insert (

_16997199184281837438.idx )
        ;

        _10762543579000176710 ->

  addMarker (

  _2654435878 )

   ;

     }

     return

true ;
 }

string System ::
  _9727665765668901870 ( uint64_t _11093822380353 )

   const {

    string _706246330193866 ;

    string _46082576163156525 = "\x71\x77\x65\x72\x74\x79\x75\x69\x6f\x70\x61\x73\x64\x66\x67\x68\x6a\x6b\x6c\x7a\x78\x63\x76\x62\x6e\x6d\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x51\x57\x45\x52\x54\x59\x55\x49\x4f\x50\x41\x53\x44\x46\x47\x48\x4a\x4b\x4c\x5a\x58\x43\x56\x42\x4e\x4d" ;

    uchar * _2654435884 =
      (

    uchar * )

 &_11093822380353 ;

     int _2654435879 =
     sizeof (

   _11093822380353 )
      /sizeof (

  uchar )

 ;

     for(

   int _2654435874 =

  0 ;

    _2654435874 <

       _2654435879 ;

    _2654435874 ++

     )

  {

        _706246330193866.push_back (

   _46082576163156525 [

     _2654435884 [
       _2654435874 ]

      %_46082576163156525.size ()
     ]

  )

  ;

     }
     return

    _706246330193866 ;

 }

 uint32_t

 System ::

   _17508337877569083564 ( const Frame &_10614055813325501077, const se3 &_10706799483371532009 )

   {

    int64_t _644211886852851457 =

    -1 ;

     if

  (

    _16805773490000196330.detectKeyPoints )

       _644211886852851457 =
   _10762543579000176710 ->

         getReferenceKeyFrame (

   _10614055813325501077,1 )

         ;
     if
   (
_644211886852851457 !=
      -1 )
    return

_644211886852851457 ;

     if

  (

     _10762543579000176710 ->

   map_markers.size () ==

 0 )

  {

         return

      _17510502251974591806 ;

     }

    vector <

  uint32_t >
      _4240713669852012646 ;

     for(

        auto _2654435878:_10614055813325501077.markers )
 {

         auto

   _3005399795337363304 =

     _10762543579000176710 ->

  map_markers.find ( _2654435878.id )
  ;

         if

 (
 _3005399795337363304 !=

     _10762543579000176710 ->

     map_markers.end () )
      {

             if (
       _3005399795337363304 ->

       second.pose_g2m.isValid ()

  )

       _4240713669852012646.push_back (
  _2654435878.id )

     ;

         }

     }

    pair <
       uint32_t,float >

     _18337238202410394478 (
       std :: numeric_limits <
      uint32_t >

    ::

 max ()
  ,std ::
numeric_limits <

float >

     ::

         max ()

    )

   ;
     for(

  auto _3005399795337363304:_4240713669852012646 )

         for(

   const auto

 &_46082543180066935:_10762543579000176710 ->

  map_markers [
       _3005399795337363304 ] .frames )

   {

             auto

 _2654435869 =
      _10706799483371532009 .t_dist (

 _10762543579000176710 ->

 keyframes [

     _46082543180066935 ]
       .pose_f2g )

       ;

             if

  (

         _18337238202410394478.second >

     _2654435869 )

   _18337238202410394478 =

    {

  _46082543180066935,_2654435869 }

    ;

         }

     return

 _18337238202410394478.first ;

 }
std ::

 vector <

System ::

 _5992633625340765749 >

   System ::

       _1728481360185120288 ( Frame &_16940374161494853219,se3 &_13011065492167565582 ,const std :: set <
      uint32_t >
  &_16997249117545452056 )
        {

     if
        (

   _16940374161494853219.ids.size ()

   ==

       0 )

 return {
        }

    ;

     if
     ( _10762543579000176710 ->
       TheKFDataBase.isEmpty ()

 )
    return {

        }

  ;

    vector <

    uint32_t >

   _5288382201172378343 = _10762543579000176710 ->

  relocalizationCandidates (

     _16940374161494853219,_16997249117545452056 )

  ;

     if

 ( _5288382201172378343.size ()

  ==

0 )
       return {
      }

          ;

    vector <
   System ::

   _5992633625340765749 >

    _1524129789187101628 (

 _5288382201172378343.size ()

     )

   ;

    FrameMatcher _16937386958649118140 ;

    _16937386958649118140.setParams (

  _16940374161494853219,FrameMatcher ::

  MODE_ALL,_16805773490000196330.maxDescDistance*2 )

    ;

     for(
   int _175247762874 =

       0 ;

         _175247762874 <

  _5288382201172378343.size ()

 ;

   _175247762874 ++

        )
    {

         auto

     _175247760268 =

  _5288382201172378343 [

  _175247762874 ]

  ;
         auto

&_3005399814901981436 =

_10762543579000176710 -> keyframes [

_175247760268 ]
      ;

        _1524129789187101628 [ _175247762874 ]

._14923942641780752535 =

   _16937386958649118140.match (

        _3005399814901981436,FrameMatcher ::

 MODE_ASSIGNED )
 ;

         for(
   auto &_2654435878:_1524129789187101628 [

_175247762874 ]
    ._14923942641780752535 ) {

            std ::
 swap (

        _2654435878.queryIdx,_2654435878.trainIdx )

     ;

            _2654435878.trainIdx =

 _3005399814901981436.ids [

 _2654435878.trainIdx ]

   ;

         }

         for(
int _2654435874 =
       0 ;

  _2654435874 <

_1524129789187101628 [

    _175247762874 ]

 ._14923942641780752535.size ()

  ;

   _2654435874 ++

  )
      {
             auto

&_175247759380 =

_1524129789187101628 [

   _175247762874 ]

 ._14923942641780752535 [

_2654435874 ]
   .trainIdx ;
             if(

  !
      _10762543579000176710 ->
map_points.is (
     _175247759380 )
       )

                _1524129789187101628 [

    _175247762874 ]

 ._14923942641780752535 [
_2654435874 ]

  .trainIdx =
       -1 ;

             if(

  _10762543579000176710 ->

map_points [
       _175247759380 ]

  .isBad () )

                _1524129789187101628 [

_175247762874 ]

   ._14923942641780752535 [

     _2654435874 ]

    .trainIdx =
   -1 ;

         }

        remove_unused_matches ( _1524129789187101628 [

  _175247762874 ]

._14923942641780752535 )

   ;

         if

     (

_1524129789187101628 [

  _175247762874 ]

 ._14923942641780752535.size () <

     25 ) continue ;

        _1524129789187101628 [

   _175247762874 ]

  ._707186293853633825 =

     _3005399814901981436.pose_f2g ;

        PnPSolver ::

      solvePnPRansac (

 _16940374161494853219,_10762543579000176710,_1524129789187101628 [

 _175247762874 ]
._14923942641780752535,_1524129789187101628 [
    _175247762874 ] ._707186293853633825 )
 ;

          if

 (
   _1524129789187101628 [

    _175247762874 ]

      ._14923942641780752535.size ()

   <
 15 )

   continue ;

        _1524129789187101628 [
     _175247762874 ]

   ._14923942641780752535 =
     _10762543579000176710 ->

     matchFrameToMapPoints (

   _10762543579000176710 ->

   TheKpGraph.getNeighborsVLevel2 (

      _175247760268,true )

 , _16940374161494853219, _1524129789187101628 [

    _175247762874 ] ._707186293853633825 ,_16805773490000196330.maxDescDistance*2, 2.5,false )

    ;

         if
  (

 _1524129789187101628 [

 _175247762874 ]

    ._14923942641780752535.size ()

          <
   30 )
   continue ;

        PnPSolver ::

    solvePnp (
      _16940374161494853219,_10762543579000176710,_1524129789187101628 [

    _175247762874 ] ._14923942641780752535,_1524129789187101628 [

  _175247762874 ] ._707186293853633825 )

     ;

          if

 (

 _1524129789187101628 [
      _175247762874 ]

._14923942641780752535.size ()

       <

 30 ) continue ;

        _1524129789187101628 [ _175247762874 ]

    . _17199050434970069896 =

     _16940374161494853219.ids ;

         for(

    auto _46082575882272165: _1524129789187101628 [

    _175247762874 ]

 ._14923942641780752535 )

            _1524129789187101628 [

_175247762874 ]

   ._17199050434970069896 [
   _46082575882272165.queryIdx ]
 =

_46082575882272165.trainIdx ;

     }

    std ::
     remove_if (
    _1524129789187101628.begin ()

 ,_1524129789187101628.end ()

, [
     ]

  (
     const _5992633625340765749 &_2654435866 )
      {

    return _2654435866._14923942641780752535.size ()

   <=

  30 ;

   }

  )

  ;

    std ::
    sort (

         _1524129789187101628.begin ()

     ,_1524129789187101628.end () , [

    ]

 (

   const _5992633625340765749 &_2654435866,const _5992633625340765749 &_2654435867 )

      {

 return _2654435866._14923942641780752535.size ()

      >
    _2654435867._14923942641780752535.size ()

     ;

 }

 )

      ;

    return

_1524129789187101628 ;

 }

 bool
    System ::
      _14784383942756869665 (

   Frame &_16940374161494853219,se3 &_13011065492167565582 , const std ::

set <

        uint32_t >

  &_16997249117545452056 )

    {

     auto
 _1524129789187101628 =

     _1728481360185120288 (

 _16940374161494853219,_13011065492167565582,_16997249117545452056 )

    ;

     if

  (

       _1524129789187101628.size ()

    ==
0 )

          return

    false ;

     if

      (

     _1524129789187101628 [

     0 ] ._14923942641780752535.size ()

 >

      30 )

     {

        _13011065492167565582 =

  _1524129789187101628 [

0 ]

    ._707186293853633825 ;

        _16940374161494853219.ids =
    _1524129789187101628 [ 0 ]
  ._17199050434970069896 ;

         return

 true ;

     }
     else
     return

 false ;

 }

 bool

   System ::

  _8439838123052468212 (

 Frame &_2654435871,se3 &_13011065492167565582 )

    {

      if
    (
       _2654435871.markers.size ()

 == 0 )

   return false ;

    vector <

 uint32_t >

    _7895328205142007059 ;

     for(

        auto
      &_2654435878:_2654435871.markers )

   {

         auto

_8332348524113911167 =

    _10762543579000176710 ->

 map_markers.find (

  _2654435878.id )
      ;

         if(

_8332348524113911167 !=

    _10762543579000176710 ->

   map_markers.end ()

  )

             if

  (

     _8332348524113911167 ->

         second.pose_g2m.isValid ()

     )

                _7895328205142007059.push_back (

        _2654435878.id )

 ;

     }

     if
        (
       _7895328205142007059.size ()
       ==

        0 )

  return false ;

  _13011065492167565582 =
  _10762543579000176710 ->
       getBestPoseFromValidMarkers (

         _2654435871,_7895328205142007059,_16805773490000196330.aruco_minerrratio_valid )

         ;

   return

   _13011065492167565582.isValid ()

  ;

 }

  bool

  System ::

   _6638785117005124636 (

 Frame &_2654435871, se3 &_13011065492167565582 )

    {

    _13011065492167565582 =

    se3 ()
      ;

     if(

         _16805773490000196330.reLocalizationWithMarkers )

 {
         if (

     _8439838123052468212 (

 _2654435871,_13011065492167565582 )

          )

  return true ;
     }

     if(

      _16805773490000196330.reLocalizationWithKeyPoints )
        {

         if

          (

     _14784383942756869665 (

  _2654435871,_13011065492167565582 )

  )

      return
  true ;

     }

     return

 false
    ;

 }

std :: vector <
      cv ::

  DMatch >

   System ::

 _15038921953448872563 (

Frame & _16940374161810747371, Frame &_5918541169384278026, float

       _1686565542397313973, float
  _4500031049790251086 )

 {

    std ::

    vector <

       cv ::

    DMatch >

 _6807036698572949990 ;

     for(

size_t _2654435874 = 0 ;

   _2654435874 <

 _5918541169384278026.ids.size ()
   ;

    _2654435874 ++

          )
        {

         uint32_t

     _11093822294347 =

 _5918541169384278026.ids [

 _2654435874 ]
        ;

         if

    (

 _11093822294347 != std ::
  numeric_limits <

 uint32_t >

   ::

max ()
   )
  {

             if(

    _10762543579000176710 ->

   map_points.is (

_11093822294347 )
 )

       {

                MapPoint &_3005399799907669332 =
 _10762543579000176710 ->

         map_points [

  _11093822294347 ]
       ;

                 if

      (
    _3005399799907669332.isBad ()

    )

      continue ;

                 auto

     _11093822300120 =
  _16940374161810747371.project (
       _3005399799907669332.getCoordinates ()

  ,true,true )

 ;

                 if
 (

      isnan (

     _11093822300120.x )

  )

 continue ;
// # 6612 "/app/example.cpp"
                 int

    _3005399801676750422 =

_5918541169384278026.und_kpts [

 _2654435874 ]

.octave ;

                 float

    _11093822303615 =
       _4500031049790251086 * std ::
     pow (

   _16805773490000196330.scaleFactor, _10762543579000176710 ->

     _maxOctaveLevel-_3005399801676750422 )

      ;

                std ::
 vector < uint32_t >
  _10924592426265627429 = _16940374161810747371.getKeyPointsInRegion (

     _11093822300120,_11093822303615,_3005399801676750422,_3005399801676750422 )

   ;

                 float

_16940367568811467085 =

    _1686565542397313973+0.01,_16992066385107317811 =

         std ::

 numeric_limits <

     float >

      ::

      max ()

      ;

                 uint32_t
   _6806984971934960832 =

    std ::

numeric_limits <

    uint32_t >

      ::
     max ()

  ;

                 for( auto _175247760278:_10924592426265627429 )

    {

                     if

   (

  _16940374161810747371.und_kpts [ _175247760278 ]

     .octave ==

     _5918541169384278026.und_kpts [

  _2654435874 ]

       .octave )

     {

                         float

 _16940392174182767813 =
        MapPoint ::

 getDescDistance (

      _5918541169384278026.desc,_2654435874, _16940374161810747371.desc,_175247760278 )
  ;

                         if

    ( _16940392174182767813 < _16940367568811467085 )
   {

                            _16940367568811467085 = _16940392174182767813 ;

                            _6806984971934960832 =

   _175247760278 ;

                         }
                         else

     if

       (

    _16940392174182767813 <
_16992066385107317811 )

       {

                            _16992066385107317811 =
    _16940392174182767813 ;

                         }

                     }

                 }

                 if
       (

_6806984971934960832 !=

  std ::

        numeric_limits <
   uint32_t >

 ::

    max ()

   &&
   _16940367568811467085 <
   0.7*_16992066385107317811 )

    {
                    cv ::

     DMatch _175247759376 ;
                    _175247759376.queryIdx =

     _6806984971934960832 ;

                    _175247759376.trainIdx =

   _3005399799907669332.id ;

                    _175247759376.distance =
      _16940367568811467085 ;

                    _6807036698572949990.push_back ( _175247759376 )

   ;

                 }

             }

         }

     }

    filter_ambiguous_query (

_6807036698572949990 )

  ;

     return

       _6807036698572949990 ;
 }

se3 System ::

     _13245762729631011225 (
       Frame &_16940374161810747371,se3 _14387478432460351890 )

      {

    std ::
  vector <

   cv ::

  DMatch >

     _637068542992099399 ;

    se3 _5769551021164122736 =

 _14387478432460351890 ;

      if

 (
       _10762543579000176710 ->
    map_points.size ()

   > 0 ) {

          if

      (
    !
 _7053670376446719714.empty ()

   )

             _5769551021164122736 =

     _7053670376446719714*_5769551021164122736.convert ()

         ;

        _16940374161810747371.pose_f2g =

_5769551021164122736 ;

        _637068542992099399 =

    _15038921953448872563 (

_16940374161810747371,_6731656245229539747,_16805773490000196330.maxDescDistance*1.5,_16805773490000196330.projDistThr )

        ;

         int _9870110657242862171 =

   0 ;

         if

     (

         _637068542992099399.size ()
   >

       30 ) {

             auto

    _14671559813105454070 =
      _5769551021164122736 ;

            _9870110657242862171 = PnPSolver ::

    solvePnp (

     _16940374161810747371,_10762543579000176710,_637068542992099399,_14671559813105454070,_17510502251974591806 )

    ;

             if

 ( _9870110657242862171 >

   30 )

      _5769551021164122736 =

     _14671559813105454070 ;

         }

        else {

            FrameMatcher _16997326787393468537 (

FrameMatcher ::

TYPE_FLANN )

      ;

            _16997326787393468537.setParams (

         _10762543579000176710 ->
      keyframes [

   _17510502251974591806 ]

  ,FrameMatcher ::

    MODE_ASSIGNED,_16805773490000196330.maxDescDistance*2,0.6,true,3 )

  ;

            _637068542992099399 =

  _16997326787393468537.match (
       _16940374161810747371,FrameMatcher ::
      MODE_ALL )

    ;

             if(

     _637068542992099399.size ()

    >

30 )

  {

                 for(

         auto &_2654435878:_637068542992099399 )

                    _2654435878.trainIdx =

     _10762543579000176710 ->

       keyframes [
 _17510502251974591806 ]

.ids [

      _2654435878.trainIdx ]

     ;

                 auto

 _14671559813105454070 =

_5769551021164122736 ;

                _9870110657242862171 =

    PnPSolver ::

     solvePnp (

 _16940374161810747371,_10762543579000176710,_637068542992099399,_14671559813105454070,_17510502251974591806 )

    ;

                 if

    (

    _9870110657242862171 > 30 )

     _5769551021164122736 =

  _14671559813105454070 ;

             }

             else

  _9870110657242862171 =

   0 ;

         }

         float

 _3763415994652820314 ;

         if

          (

   _9870110657242862171 >

30 )

   {

            _3763415994652820314 =
4 ;
             for(

 auto _2654435878: _637068542992099399 ) {

                _10762543579000176710 ->
  map_points [

    _2654435878.trainIdx ]

   .lastFIdxSeen =

  _16940374161810747371.fseq_idx ;

                _10762543579000176710 ->

     map_points [

       _2654435878.trainIdx ]

     .setVisible ()

     ;

             }

         }

        else {

            _637068542992099399.clear ()

    ;

            _3763415994652820314 =

    _16805773490000196330.projDistThr ;

         }

         bool

  _10517421797211956538 = false ;

         if(

    _7599632917966626906 ==

  STATE_TRACKING )

            _10517421797211956538 =

   true ;

         auto

    _3521005873836563963 =

      _10762543579000176710 -> matchFrameToMapPoints (
  _10762543579000176710 ->

   TheKpGraph.getNeighborsVLevel2 (
        _17510502251974591806,true )

 , _16940374161810747371, _5769551021164122736 ,_16805773490000196330.maxDescDistance*2, _3763415994652820314,_10517421797211956538 )

  ;

        _637068542992099399.insert (

   _637068542992099399.end ()
    ,_3521005873836563963.begin ()

  ,_3521005873836563963.end ()

     )

    ;

        filter_ambiguous_query (

    _637068542992099399 ) ;

     }

      int

_8650310500205049352 =

   PnPSolver ::

  solvePnp (

      _16940374161810747371,_10762543579000176710,_637068542992099399,_5769551021164122736,_17510502251974591806 )

        ;

     bool

    _6535949166237672095 =

false ;

     if

        ( _16940374161810747371.markers.size ()

    >
 0 )

   {

         int
 _9870110666330890270 =

   0 ;

         for(

   size_t _2654435874 =
     0 ;

      _2654435874 < _16940374161810747371.markers.size ()

   ;

  _2654435874 ++ )
 {

             auto

 _11093822290813 =
 _10762543579000176710 ->

map_markers.find (
    _16940374161810747371.markers [

   _2654435874 ]

   .id )

     ;

             if(

 _11093822290813 ==

     _10762543579000176710 ->

  map_markers.end ()

    ) continue ;

             if

 (

          !

    _11093822290813 ->

second.pose_g2m.isValid ()
       )

        continue ;

            _9870110666330890270 ++

     ;

             if

 (

     _16940374161810747371.markers [

     _2654435874 ] .poses.err_ratio <
 _16805773490000196330.aruco_minerrratio_valid )

  continue ;

            _6535949166237672095 = true ;

            break ;

         }

         if

 (

    _9870110666330890270 >

       1 )
        _6535949166237672095 =
true ;

         else

    _6535949166237672095 =

   false ;

     }
     if
 (

   _8650310500205049352 <

  30 &&
   !

_6535949166237672095 )
 {

      return

    se3 ()
      ;

     }

     for(

size_t _2654435874 =

   0 ;

     _2654435874 <

 _637068542992099399.size ()

        ;
   _2654435874 ++

   ) {

            _10762543579000176710 -> map_points [

_637068542992099399 [

  _2654435874 ]

      .trainIdx ]

   .setSeen ()

  ;

            _16940374161810747371.ids [

     _637068542992099399 [

     _2654435874 ]

    .queryIdx ]

  =

   _637068542992099399 [
 _2654435874 ]

        .trainIdx ;

             if (

  _637068542992099399 [

   _2654435874 ]

 .imgIdx == -1 )

                _16940374161810747371.flags [

  _637068542992099399 [
 _2654435874 ]

 .queryIdx ] .set (
Frame :: FLAG_OUTLIER,true )

      ;

     }

     return
_5769551021164122736 ;

 }

 void
    System ::

    _1400008259408517257 (

    cv ::

  Mat &_46082544231248938, float

    _9971115036363993554 )

         const {

     int

  _706246330297760 =

        float (

 _46082544231248938.cols ) /640.f ;

    cv ::

     Point2f _46082575822903876 (

   _706246330297760,_706246330297760 )

      ;

     bool

       _16987668682974831349 =

 false ;

      if

 (

 _7599632917966626906 == STATE_TRACKING )
        {

         for(

    size_t _2654435874 =

    0 ;

     _2654435874 <

_16805767570017655115.ids.size ()

    ;

   _2654435874 ++ )

             if

     (

     _16805767570017655115.ids [ _2654435874 ]

     !=

   std ::

numeric_limits <

         uint32_t >
        ::

      max ()

 ) {

                 if

 (
    ! _10762543579000176710 ->

   map_points.is (

     _16805767570017655115.ids [

_2654435874 ]

    )
        )

   continue ;

                cv :: Scalar _46082574599890393 (

 0,255,0 )

        ;

                 if (

        !

   _10762543579000176710 ->

    map_points [

_16805767570017655115.ids [

_2654435874 ]

    ] .isStable ()

       )

    { _46082574599890393 =
     cv ::

      Scalar (

  0,0,255 )

    ;

 }

                cv ::

    rectangle (

 _46082544231248938,_9971115036363993554* ( _16805767570017655115.kpts [

 _2654435874 ]

    -_46082575822903876 )

   ,_9971115036363993554* (

     _16805767570017655115.kpts [
      _2654435874 ]

    +_46082575822903876 )

     ,_46082574599890393,_706246330297760 )

  ;

             }

             else

  if(

          _16987668682974831349 )

  {

                cv ::

Scalar _46082574599890393 (

    255,0,0 )

      ;

                cv ::
 rectangle (

 _46082544231248938,_9971115036363993554* (
 _16805767570017655115.kpts [

       _2654435874 ]
-_46082575822903876 )

  ,_9971115036363993554* (
      _16805767570017655115.kpts [

        _2654435874 ]

       +_46082575822903876 )

    ,_46082574599890393,_706246330297760 )

 ;

             }

     }

     else

     if(

    _10762543579000176710 ->

     isEmpty ()

   )

   {

         for(

  auto

     _2654435881: _16805767570017655115.kpts )

            cv ::

  rectangle (

    _46082544231248938,_9971115036363993554* (

 _2654435881-_46082575822903876 )

 ,_9971115036363993554* (
       _2654435881+_46082575822903876 )

 ,cv ::

   Scalar (

   255,0,0 )

     ,_706246330297760 )
  ;

     }

     for(

  auto _5221496220235804833:_16805767570017655115.markers )

      {

        cv ::

Scalar _46082574599890393 =

   cv ::
       Scalar (

   0,244,0 )
  ;

         if(

    _10762543579000176710 ->

   map_markers.count (

_5221496220235804833.id )

   !=

    0 )
  {

             if(

    _10762543579000176710 ->
    map_markers.at (

  _5221496220235804833.id )

 .pose_g2m.isValid ()
   )

                _46082574599890393 =

     cv :: Scalar (
     255,0,0 )

  ;

            else
                _46082574599890393 =

    cv :: Scalar (

0,0,255 )

    ;

         }

         for(

  auto &_2654435881:_5221496220235804833.corners ) _2654435881 *=

    _9971115036363993554 ;

         for(

      auto &_2654435881:_5221496220235804833.und_corners )
 _2654435881 *=

    _9971115036363993554 ;

        _5221496220235804833.draw (

_46082544231248938,_46082574599890393 )
     ;

     }

 }

 void

    System ::

    globalOptimization ()

 {
     auto
     _11093822300040 =

GlobalOptimizer ::

         create ( _16805773490000196330.global_optimizer )

 ;

    GlobalOptimizer ::
       ParamSet _3005399798454910266 (

     debug :: Debug ::
       getLevel ()

      >=

   11 )

     ;

    _3005399798454910266.fixFirstFrame =

      true ;

    _3005399798454910266.nIters =
10 ;

    _3005399798454910266.markersOptWeight =

       getParams ()

 .markersOptWeight ;

    _3005399798454910266.minMarkersForMaxWeight =
 getParams ()
       .minMarkersForMaxWeight ;

    _3005399798454910266.InPlaneMarkers = getParams ()

 .inPlaneMarkers ;
    _11093822300040 ->

        optimize (

_10762543579000176710,_3005399798454910266 )

         ;

    _10762543579000176710 ->

removeBadAssociations (

   _11093822300040 ->

  getBadAssociations ()

  ,2 )

         ;

 }

 uint32_t

 System ::

     getLastProcessedFrame ()

 const {

return _16805767570017655115.fseq_idx ;

 }

 void
  System ::

setMode (
    MODES _706246332824366 ) {

    _13736188859597190254 =

   _706246332824366 ;

 }

 void

  System ::

      setCamera (

   CAMERA _11093822060392 )

    {

    _6291654841120756956 =

_11093822060392 ;

 }

STATE System ::

   getState ()

   {

     return

   _7599632917966626906 ;

 }

  void

      System ::
clear () {
     _9141803538300908158 =
std ::

make_shared <

   MapManager >

   ()

    ;

     _1227001083608564617 =

 false ;

     _7599632917966626906 =

  STATE_LOST ;

     _10762543579000176710.reset ()

     ;

     _11449928097377700216 =

 std ::
     make_shared <

    MapInitializer >

  ()

      ;

     _7053670376446719714 =

 cv ::

         Mat ()
     ;

     _1426313296465708397 =

-1 ;

  }

  void

System ::

  saveToFile (

     string _16997227483604144380 )

      {

     waitForFinished ()
 ;

     fstream _706246330143775 (

    _16997227483604144380,ios_base ::

   binary|ios_base ::

  out )

  ;

      if(

     !

_706246330143775 )

  throw std :: runtime_error (

string (
      __PRETTY_FUNCTION__ )

+"\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x70\x65\x6e\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x20\x77\x72\x69\x74\x69\x6e\x67\x3a"+_16997227483604144380 )
   ;

     io_write < uint64_t >

  (

   182313,_706246330143775 )

 ;

     _10762543579000176710 ->

    toStream (

   _706246330143775 )

 ;

     _16805773490000196330.toStream ( _706246330143775 )

  ;

     _706246330143775.write (

        (

   char* )

         &_3746282635465101757,sizeof (

        _3746282635465101757 )

      )

  ;

     _706246330143775.write (

  (
    char* )

  &_17510502251974591806,sizeof (

_17510502251974591806 )

 )
       ;

     _706246330143775.write (
    (

      char* )

     &_1227001083608564617,sizeof (
_1227001083608564617 )
        ) ;
     _706246330143775.write (

   (

char* )

   &_7599632917966626906,sizeof (

_7599632917966626906 )

 )

      ;

     _706246330143775.write ( (

  char* )

 &_13736188859597190254,sizeof ( _13736188859597190254 )

 )

          ;

     _16805767570017655115.toStream (

_706246330143775 ) ;

     _6731656245229539747.toStream (

  _706246330143775 )

    ;

     _6644573796688729791 ->

    toStream ( _706246330143775 )

        ;

     _9141803538300908158 ->

toStream (

     _706246330143775 )

    ;

     _1508819710414606447 ->

     toStream (

      _706246330143775 )

   ;
     toStream__ (

    _7053670376446719714,_706246330143775 )
     ;

     _706246330143775.write (

   (
  char* )
 &_1426313296465708397,sizeof (

         _1426313296465708397 )

     )

 ;

     _706246330143775.write (

   (

char* )

&_16812765159998713427,sizeof (

  _16812765159998713427 )

   )

 ;

     _706246330143775.flush ()

     ;

  }

  void

System ::

  readFromFile (

    string _16997227483604144380 )

 {

     ifstream _706246330143775 (

 _16997227483604144380,ios ::

binary )
   ;

      if(

 !

  _706246330143775 )

throw std ::

   runtime_error (

    string (

       __PRETTY_FUNCTION__ )
+"\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x70\x65\x6e\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x20\x72\x65\x61\x64\x69\x6e\x67\x3a"+_16997227483604144380 )

    ;

      if (

     io_read <

     uint64_t >

   (

         _706246330143775 )

     !=

      182313 )

   throw std ::
 runtime_error (

   string (

     __PRETTY_FUNCTION__ )

 +"\x69\x6e\x76\x61\x6c\x69\x64\x20\x66\x69\x6c\x65\x20\x74\x79\x70\x65\x3a"+_16997227483604144380 )

      ;

     _10762543579000176710 =

  std ::

    make_shared < Map >

   ()

    ;

     _10762543579000176710 ->

     fromStream (

   _706246330143775 )

        ;

     _16805773490000196330.fromStream (

_706246330143775 )
      ;

      _706246330143775.read (
  (

 char* )

  &_3746282635465101757,sizeof (

    _3746282635465101757 )
     )
  ;

     _706246330143775.read (
     (
char* )

       &_17510502251974591806,sizeof (
    _17510502251974591806 )

 )

 ;

     _706246330143775.read (

          (

  char* )

 &_1227001083608564617,sizeof (

    _1227001083608564617 )

  )

     ;

     _706246330143775.read (
  (

       char* )

&_7599632917966626906,sizeof (

 _7599632917966626906 )
   )

     ;

     _706246330143775.read (
      (

         char* )

    &_13736188859597190254,sizeof (

  _13736188859597190254 ) )

      ;

     _16805767570017655115.fromStream (
      _706246330143775 ) ;

     _6731656245229539747.fromStream (

     _706246330143775 )

   ;

     _6644573796688729791 ->
 fromStream ( _706246330143775 )
        ;

     _9141803538300908158 ->

     fromStream (

 _706246330143775 )

   ;

     _1508819710414606447 ->

         fromStream ( _706246330143775 )

        ;

     fromStream__ (

        _7053670376446719714,_706246330143775 )

        ;

     _706246330143775.read (

    (

         char* )

&_1426313296465708397,sizeof (

    _1426313296465708397 )

     )

   ;

     _706246330143775.read (
        (
     char* )

       &_16812765159998713427,sizeof (
 _16812765159998713427 )

         )

 ;

  }

  }

  */