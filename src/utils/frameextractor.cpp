#include "utils/frameextractor.h"
#include <thread>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "basictypes/timers.h"
#include "basictypes/misc.h"
#include "optimization/ippe.h"
#include "map_types/mappoint.h"
#include "utils/markerdetector.h"
#include "basictypes/osadapter.h"
#include "basictypes/cvversioning.h"
#include "xflann/xflann.h"
#include "utils/framematcher.h"


 namespace

ucoslam {

 void

     FrameExtractor ::
     toStream ( 
     std ::

         ostream &_11093822381060 )
const
 {

    uint64_t _11093822380353 =         1923123 ;

    _11093822381060.write ( 
  ( char* )
    &_11093822380353,sizeof ( 
   _11093822380353 )
        ) ;

    _8033463663468506753 ->

  toStream ( 
  _11093822381060 )
 ;

    _11093822381060.write (     ( char* )
&_12273370977065616393,sizeof ( 
 _12273370977065616393 )
  )
    ;

    _11093822381060.write ( 
   ( 
      char* )
&_12350051723532614025,sizeof ( 
   _12350051723532614025 )
   )
 ;

    _11093822381060.write ( 
    ( 
 char* )     &_3566717627060593117,sizeof ( 
   _3566717627060593117 )
          )
      ;

    _11093822381060.write (    ( char* )
 &_4309197024622458338,sizeof (_4309197024622458338 )    )
  ;

    _11093822381060.write (     ( 
char* )
  &_12693418215446769236,sizeof ( 
    _12693418215446769236 )
       )
      ;

    _11093822381060.write ( 
   ( 
     char* )
 &_10675870925382111478,sizeof ( 
   _10675870925382111478 )
    )  ;

    _11093822381060.write ( 
   ( 
    char* )
&_13206983270957238750,sizeof ( 
  _13206983270957238750 )
      )
         ;

    _13116459431724108758.toStream ( _11093822381060 )
   ;

 }

 void

  FrameExtractor ::
   fromStream ( std ::

istream &_11093822381060 )    {

    uint64_t _11093822380353 = 1923123 ;

    _11093822381060.read ( 
 ( 
char* ) &_11093822380353,sizeof ( 
_11093822380353 )
    )
          ;

     if

   ( 
    _11093822380353 !=       1923123 )
        throw std ::

        runtime_error ( 
string ( 
  __PRETTY_FUNCTION__ )
+"\x69\x6e\x76\x61\x6c\x69\x64\x20\x73\x69\x67\x6e\x61\x74\x75\x72\x65" )        ;

    _8033463663468506753 =      Feature2DSerializable ::

 fromStream ( 
 _11093822381060 ) ;

    _11093822381060.read ( 
  ( 
 char* )
        &_12273370977065616393,sizeof ( 
_12273370977065616393 ) )   ;

    _11093822381060.read ( 
 (  char* )
&_12350051723532614025,sizeof ( 
 _12350051723532614025 )
   )
     ;

    _11093822381060.read ( 
          ( 
         char* )
      &_3566717627060593117,sizeof ( 
        _3566717627060593117 )     )
     ;

    _11093822381060.read (       ( 
 char* )   &_4309197024622458338,sizeof (   _4309197024622458338 )
     )
 ;

    _11093822381060.read ( 
      ( 
 char* )
&_12693418215446769236,sizeof ( 
        _12693418215446769236 )
   )
    ;
    _11093822381060.read (      (char* )
     &_10675870925382111478,sizeof ( 
        _10675870925382111478 )
  )  ;

    _11093822381060.read ( ( 
 char* )
  &_13206983270957238750,sizeof ( 
 _13206983270957238750 )
   )
   ;

    _13116459431724108758.fromStream ( 
_11093822381060 )
 ;

 }

FrameExtractor ::
    FrameExtractor ()
   {

 }

 void

 FrameExtractor ::
setParams ( 
         std ::

 shared_ptr < Feature2DSerializable >

    _11022048600091140151, const Params &_3005399798454910266, std ::

shared_ptr <

      ucoslam ::

   MarkerDetector > _1516358670470627782 )    {

    _8033463663468506753 =   _11022048600091140151 ;

     if( 
 ! _1516358670470627782 )
     throw std ::

   runtime_error ("\x46\x72\x61\x6d\x65\x45\x78\x74\x72\x61\x63\x74\x6f\x72\x3a\x3a\x73\x65\x74\x50\x61\x72\x61\x6d\x73\x20\x69\x6e\x76\x61\x6c\x69\x64\x20\x6d\x61\x72\x6b\x65\x72\x20\x64\x65\x74\x65\x63\x74\x6f\x72" ) ;

    _8000946946827829134 = _1516358670470627782 ;

    _13116459431724108758 = _3005399798454910266 ;

    _3566717627060593117 =   _3005399798454910266.detectMarkers ;

    _4309197024622458338 = _3005399798454910266.detectKeyPoints ;

    _12693418215446769236 =     _3005399798454910266.aruco_markerSize ;

    _10675870925382111478 =     Feature2DSerializable ::
       FeatParams ( 
  _3005399798454910266.maxFeatures,_3005399798454910266.nOctaveLevels,_3005399798454910266.scaleFactor, _3005399798454910266.nthreads_feature_detector )
  ;

    _13206983270957238750 =    _3005399798454910266.maxDescDistance ;

 }

 void

       FrameExtractor ::

 setSensitivity ( 
     float _2654435887 )
   {

     if( 
 _8033463663468506753 )
        _8033463663468506753 ->
    setSensitivity (     _2654435887 )
      ;

 }

 float

   FrameExtractor ::
getSensitivity () {

     if( 
   !

_8033463663468506753 )
     throw std ::

    runtime_error ( 
 string (   __PRETTY_FUNCTION__ )+"\x53\x68\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x63\x61\x6c\x6c\x20\x74\x68\x69\x73\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x73\x69\x6e\x63\x65\x20\x74\x68\x65\x20\x63\x6c\x61\x73\x73\x20\x69\x73\x20\x6e\x6f\x74\x20\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64" )
      ;

     return _8033463663468506753 ->

        getSensitivity ()
  ;

 }

 void FrameExtractor ::

    processArray ( const vector <

  cv ::
  Mat >

  &_3005401535270843804, ImageParams &_4702029808027735906 , Frame &_46082543180066935, uint32_t
   _9933887380370137445, const std ::

   shared_ptr <

   MapInitializer >

     _16937373753903353427 )
 {

    std ::

    vector <
     cv ::
    DMatch >

        _6807036698572949990 ;

    _10230054520346001887 ( 
    _13116459431724108758.kptImageScaleFactor,_3005401535270843804,_4702029808027735906 )
 ;

    _17131366770609715580 ( 
 _12800511165451773841 [ 0 ]

  ,_46082543180066935,_9933887380370137445 )
      ;

    vector <

  float >

         _8152716818190584743 ( 
  _46082543180066935.scaleFactors )
   ;

     for(auto &_2654435887:_8152716818190584743 ) _2654435887 =  _2654435887*_2654435887 ;

    _46082543180066935.depth.resize ( 
     _46082543180066935.und_kpts.size ()
  )
     ;

     for( 
      size_t _2654435874 =      0 ;

    _2654435874 <

     _46082543180066935.depth.size ()
     ;

  _2654435874 ++

       )
 _46082543180066935.depth [

_2654435874 ]

    =        0 ;

    vector <
      cv ::

  KeyPoint >

    _15583426435820593759 ;

    cv ::

       Mat _15583426435822513722 ;

    _8033463663468506753 ->

  detectAndCompute ( 
_12800511165451773841 [

     1 ]

._8358128829407646415,cv ::

      Mat ()    ,_15583426435820593759,_15583426435822513722,_10675870925382111478 )
         ;

    vector <

 cv ::
      Point2f >

    _988585936380730887 ;

 _988585936380730887.reserve ( _15583426435820593759.size ()
 )
    ;

     for( auto _2654435881:_15583426435820593759 )
    _988585936380730887.push_back ( 
    _2654435881.pt )
      ;

    _12800511165451773841 [

 0 ]

    ._5505640830793117477.undistortPoints ( 
   _988585936380730887,nullptr,1 )
        ;

    vector <
  cv ::

    KeyPoint > _988585933247351277 ;

    _988585933247351277 =          _15583426435820593759 ;

     for

    ( 
     size_t _2654435874 = 0 ;

        _2654435874 <

     _15583426435820593759.size ()
    ;

       _2654435874 ++

  )
        _988585933247351277 [

  _2654435874 ]
       .pt = _988585936380730887 [

     _2654435874 ]

 ;

    _16937373753903353427 ->

    fmatcher.setParams ( 
     _46082543180066935,FrameMatcher ::

     MODE_ALL,_16937373753903353427 ->
 _params.minDescDistance,_16937373753903353427 ->
    _params.nn_match_ratio,true )
     ;

    cv :: Mat _706246338686106 =     _16937373753903353427 ->

    fmatcher.getFund12 ( 
  _12800511165451773841 [

         0 ]

        ._5505640830793117477.CameraMatrix,_12800511165451773841 [ 0 ]
   ._5505640830793117477.arrayCamMatrix [

0 ]

 ,
            getRTMatrix ( 
_12800511165451773841 [
   0 ]
    ._5505640830793117477.arrayRvec [

   0 ]

 , _12800511165451773841 [ 0 ]

  ._5505640830793117477.arrayTvec [ 0 ]

   )
   .inv ()
    )
 ;

    getMatches ( 
      _6807036698572949990, _46082543180066935, _988585933247351277, _706246338686106, _15583426435822513722, 0 )
   ;

    filter_ambiguous_train (_6807036698572949990 )
   ;

    std ::

 vector <

   cv ::

  KeyPoint >

         _3005399818393709360 ;

    std ::

      vector <

   cv :: KeyPoint >

      _3005401586147246007 ;

     for( 
 size_t _2654435878 = 0 ;
    _2654435878 <

       _6807036698572949990.size ()
          ;

 _2654435878 ++
      )
     {

        _3005401586147246007.push_back ( 
 _46082543180066935.und_kpts [
      _6807036698572949990 [

  _2654435878 ]

  .queryIdx ]

   )        ;

        _3005399818393709360.push_back ( 
_988585933247351277 [ _6807036698572949990 [

  _2654435878 ]

 .trainIdx ]
   )
      ;

     }

    std ::

 vector <

     cv ::

         Point3f >
    _11093822296219 ;

    std :: vector <

     bool >
       _3005399809928654743 ;

     int _46082544198958862 =   triangulate_ ( 
     getRTMatrix ( 
  _4702029808027735906.arrayRvec [

 0 ]

     ,_4702029808027735906.arrayTvec [

   0 ]

 )   .inv ()
, _3005401586147246007, _3005399818393709360,
            _12800511165451773841 [

0 ]

    ._5505640830793117477.CameraMatrix, _12800511165451773841 [
0 ]

     ._5505640830793117477.arrayCamMatrix [

0 ]

      ,
            _11093822296219,_46082543180066935.scaleFactors,_3005399809928654743 )
      ;

     for( 
     uint _2654435874 =     0 ; _2654435874 <

       _3005399809928654743.size ()    ;

  _2654435874 ++

     )
         if( 
  _3005399809928654743 [

        _2654435874 ]

      )
            _46082543180066935.depth [

   _6807036698572949990 [

    _2654435874 ]

.queryIdx ]
       =   _11093822296219 [

   _2654435874 ]

  .z ;
 }

 void

   FrameExtractor ::
getMatches (  std ::

   vector <

    cv ::

DMatch >
      & _6807036698572949990, const Frame &_46082543180066935, const std ::

   vector < cv ::
     KeyPoint >

   &_15583426435820593759,
                                const cv ::

   Mat &_706246338686106, const cv ::

       Mat &_15583426435822513722, int

_2654435885 )
 {

    cv ::

  Mat _6807141016749312283,_16988745808691518194 ;

     if( 
    _2654435885 ==  0 )
     {

         int

_1522768718325991990 = 16 ;

         int

  _175247759447 =      10 ;

        xflann ::
    Index _11434284364572095166 ;

        _11434284364572095166.build (   _15583426435822513722, xflann ::

    HKMeansParams (     32,0 )
     )
   ;

        _11434284364572095166.search ( 
 _46082543180066935.desc,_175247759447,_6807141016749312283,_16988745808691518194 ,xflann :: KnnSearchParams (     _1522768718325991990,false )
  )
        ;

         if

 ( 
 _16988745808691518194.type () ==  CV_32S )
            _16988745808691518194.convertTo ( 
     _16988745808691518194,CV_32F )      ;

     }

    vector <

       float >

     _8152716818190584743 ( 
  _46082543180066935.scaleFactors )       ;

     for( 
  auto &_2654435887:_8152716818190584743 )    _2654435887 =        _2654435887*_2654435887 ;
     int
  _706246333095486 =   0 ;

     for( 
    size_t _16937466872311873851 =        0 ;

      _16937466872311873851 <
   _46082543180066935.und_kpts.size ()
     ;

   _16937466872311873851 ++
    )
     {

         float

_706246330899664 =        _46082543180066935.und_kpts [

   _16937466872311873851 ]

  .pt.x*_706246338686106.at <

  float >

        ( 
        0,0 )
         +_46082543180066935.und_kpts [
 _16937466872311873851 ]

  .pt.y*_706246338686106.at <

  float >

  (  1,0 )     +_706246338686106.at <

     float >
    ( 
2,0 )
   ;

         float

   _706246330899667 = _46082543180066935.und_kpts [

       _16937466872311873851 ]

        .pt.x*_706246338686106.at <

   float >

 ( 
    0,1 )
  +_46082543180066935.und_kpts [

    _16937466872311873851 ]

    .pt.y*_706246338686106.at <

  float >

   ( 
     1,1 )
 +_706246338686106.at <

       float >

    ( 
         2,1 )
 ;
         float

   _706246330899666 = _46082543180066935.und_kpts [

   _16937466872311873851 ] .pt.x*_706246338686106.at <

float >

      ( 
0,2 )
  +_46082543180066935.und_kpts [
   _16937466872311873851 ]

  .pt.y*_706246338686106.at < float >

  ( 
     1,2 )
+_706246338686106.at <

     float >

         ( 
 2,2 ) ;
         float _6461801683607599397 =    std ::

numeric_limits <

        float > ::

    max ()       ,_6461801683607599396 =        std ::

  numeric_limits <

     float > ::

      max ()
          ;

        int64_t _6461801682275966366 =     -1, _6461801682249544409 =      -1, _12031385974440167876 =  -1 ;

         if( 
    _2654435885 ==        0 )
         {

             for( 
       int _2654435875 =       0 ;

         _2654435875 <

     _6807141016749312283.cols ;
       _2654435875 ++
     )
             {

                 int

     _16997329059161965027 =    _6807141016749312283.at <
  int >

 ( 
    _16937466872311873851,_2654435875 )
    ;
                 if( 
    std ::

  abs ( 
 _46082543180066935.und_kpts [

    _16937466872311873851 ]

   .octave - _15583426435820593759 [

  _16997329059161965027 ]

.octave )       >
    1 )  continue ;

                 float

 _2654435869 =  epipolarLineSqDist ( 
   _46082543180066935.und_kpts [

   _16937466872311873851 ]

 .pt, _15583426435820593759 [

  _16997329059161965027 ]

   .pt, _706246338686106 )
 ;

                 if ( 
     _2654435869 >= 3.84*_8152716818190584743 [

  _46082543180066935.und_kpts [

 _16937466872311873851 ]
       .octave ] )
   continue ;

                 if

     ( _16988745808691518194.at <

float >

        ( 
  _16937466872311873851,_2654435875 )       >

 _13206983270957238750 )
    continue ;

                 if

 ( 
_16988745808691518194.at <

    float >

  ( 
 _16937466872311873851,_2654435875 )
       <

    _6461801683607599396 )
                 {

                     if
     ( 
    _16988745808691518194.at <

      float >

  ( 
_16937466872311873851,_2654435875 )
     < _6461801683607599397 )
                     {

                        _706246333095486 ++
  ;

                        _6461801683607599397 =   _16988745808691518194.at <

float >

    ( 
    _16937466872311873851,_2654435875 )       ;

                        _6461801682249544409 =   _16937466872311873851 ;

                        _6461801682275966366 =  _16997329059161965027 ;

                     }

                    else
                     {
                        _6461801683607599396 = _16988745808691518194.at <
    float >

    (     _16937466872311873851,_2654435875 )
   ;

                        _12031385974440167876 =        _15583426435820593759 [

    _16997329059161965027 ]

  .octave ;

                     }

                 }

             }

         }

         else

    if( 
     _2654435885 ==   1 )        {

             for( 
size_t _16997329059161965027 = 0 ;
        _16997329059161965027 <

  _15583426435820593759.size ()
   ;

  _16997329059161965027 ++

         )
             {

                 float

    _11093822061254 =     fabs ( 
     _706246330899664*_15583426435820593759 [

_16997329059161965027 ]

.pt.x + _706246330899667*_15583426435820593759 [

         _16997329059161965027 ]
       .pt.y + _706246330899666 )
      / sqrt ( 
pow ( 
  _706246330899664,2 )
    + pow ( 
   _706246330899667,2 )
  )
 ;

                 if

  ( 
     _11093822061254 >= 3.84*_8152716818190584743 [

   _46082543180066935.und_kpts [

    _16937466872311873851 ]

.octave ]
     )       continue ;
                 if(std ::

   abs ( 
  _46082543180066935.und_kpts [

  _16937466872311873851 ]

   .octave - _15583426435820593759 [

 _16997329059161965027 ]
       .octave )
         >

  1 )
         continue ;

                 auto
      _16940388568078030328 = MapPoint ::

getDescDistance ( 
        _46082543180066935.desc,_16937466872311873851,_15583426435822513722,_16997329059161965027 )
  ;

                 if

   ( _16940388568078030328 >
   _13206983270957238750 )
    continue ;

                 if

  ( 
   _16940388568078030328 <

   _6461801683607599396 )
                 {

                     if

      ( 
_16940388568078030328 <

_6461801683607599397 )
                     {

                        _6461801683607599397 =        _16940388568078030328 ;
                        _6461801682249544409 =      _16937466872311873851 ;

                        _6461801682275966366 =  _16997329059161965027 ;

                     }

                    else
                     {

                        _6461801683607599396 =    _16940388568078030328 ;

                        _12031385974440167876 =   _15583426435820593759 [
    _16997329059161965027 ]

      .octave ;

                     }

                 }

             }

         }

         if

     ( 
     _6461801682249544409 !=  
-1 )
 {

             if( !

  ( 
 _12031385974440167876 ==         _46082543180066935.und_kpts [

  _6461801682249544409 ]
.octave &&

       _6461801683607599397 >
   _6461801683607599396*0.8f )
    )
             {

                cv :: DMatch _46082575882272165 ;

                _46082575882272165.queryIdx =         _6461801682249544409 ;

                _46082575882272165.trainIdx =       _6461801682275966366 ;

                _46082575882272165.distance =    _6461801683607599397 ;
                _6807036698572949990.push_back ( _46082575882272165 )
    ;
             }

         }

     }

 }

 void

         FrameExtractor ::
 processStereo ( 
   const cv ::
       Mat &_16937270569698259356, const cv :: Mat &_1705492249324718059, const ImageParams &_175247760147, Frame &_46082543180066935, uint32_t _9933887380370137445 )
 {
    _14329080428242784455 ( 
         _13116459431724108758.kptImageScaleFactor,_16937270569698259356,_175247760147,_1705492249324718059 )
  ;
    _17131366770609715580 ( 
 _12800511165451773841 [

  0 ]

,_46082543180066935,_9933887380370137445 )
 ;

    _46082543180066935.depth.resize ( 
  _46082543180066935.und_kpts.size ()
   )
     ;

     for( 
size_t _2654435874 = 0 ;

        _2654435874 <

       _46082543180066935.depth.size ()
 ;

   _2654435874 ++

   )
    _46082543180066935.depth [
    _2654435874 ]

         =         0 ;

    vector <

    cv ::

   KeyPoint >
   _16937465944335025110 ;

    cv ::

     Mat _1534768455952794120 ;

    _8033463663468506753 ->

 detectAndCompute ( _12800511165451773841 [

1 ]

 ._8358128829407646415,cv :: Mat ()
 ,_16937465944335025110,_1534768455952794120,_10675870925382111478 )
 ;

    vector <

        vector <

int >>

   _13925384095147685413 (   _12800511165451773841 [

  1 ]

        ._8358128829407646415.rows )
 ;

     for( 
size_t _2654435874 =  
0 ;

   _2654435874 <

 _16937465944335025110.size ()
    ;

  _2654435874 ++ )
  {

         double
  _12827320108209534756 =        0 ;

         double
       _2654435890 =      _16937465944335025110 [

 _2654435874 ]
   .pt.y ;

         int

_46082575884402673 =     std ::

       max ( 
       0,int ( 
     std ::

 round ( 
       _2654435890-_12827320108209534756 )
       )
          )
    ;

         int

     _46082575882517952 =  
std ::

 min ( 
  _12800511165451773841 [

   1 ] ._8358128829407646415.rows-1,int ( 
     std ::
  round ( 
_2654435890+_12827320108209534756 ) )
     )
          ;

         for( 
 int _2654435890 =  
_46082575884402673 ;

       _2654435890 <=   _46082575882517952 ;

    _2654435890 ++
   )
            _13925384095147685413 [

  _2654435890 ]

 .push_back ( 
 _2654435874 ) ;
     }

     int

  _14197860223095419442 =    0 ;

     for(      size_t _2654435874 = 0 ;

   _2654435874 <

_46082543180066935.und_kpts.size () ;
        _2654435874 ++
      )
 {

         int

     _2654435890 = std ::

 round (    _46082543180066935.und_kpts [

_2654435874 ]

       .pt.y )
          ;

        vector <
       int >

     &_46082575733867251 =    _13925384095147685413 [ _2654435890 ]

   ;

         int

  _16992066382187640319 =   -1 ;

         double
      _12757546498867192361 =  std ::

        numeric_limits <
 double >
      ::

      max ()
     ;
         for(    size_t _2654435875 =    0 ;
   _2654435875 <

_46082575733867251.size ()
     ;

 _2654435875 ++

   )      {
             int

      _5555178974982484866 =   _46082575733867251 [
       _2654435875 ]

   ;

             if( 
   _16937465944335025110 [

    _5555178974982484866 ]

    .pt.x >

   _46082543180066935.und_kpts [

_2654435874 ]

     .pt.x ||

    std ::

abs ( 
   _16937465944335025110 [

    _5555178974982484866 ]

   .octave-_46082543180066935.und_kpts [
_2654435874 ]

  .octave )        >

  1 )
                continue ;

                 auto

   _706246353090457 =  
MapPoint ::

 getDescDistance ( 
_46082543180066935.desc,_2654435874,_1534768455952794120,_5555178974982484866 )
    ;

                 if( 
_706246353090457 <

   _13206983270957238750 )    {

                     if( 
_706246353090457 <

 _12757546498867192361 )
  {

                        _12757546498867192361 =   _706246353090457 ;

                        _16992066382187640319 =  
_5555178974982484866 ;

                     }

                 }

         }

         if( 
     _16992066382187640319 !=  -1 )      {

             int

 _5820950562624380433 =  7 ;

             int

    _11450180203511629323 =   _5820950562624380433/2 ;

             int

     _1588944432958720138 =  
std ::

  round ( 
     _46082543180066935.und_kpts [
       _2654435874 ]

  .pt.x )
       ;

             int

_1588944432958720141 =    std ::
  round ( _46082543180066935.und_kpts [

_2654435874 ]
.pt.y )
    ;

             if( 
        _1588944432958720138 <

 _11450180203511629323 || _1588944432958720138+_11450180203511629323 >=    _16937270569698259356.cols )
                continue ;

             if(  _1588944432958720141 <

     _11450180203511629323 ||
       _1588944432958720141+_11450180203511629323 >=      _16937270569698259356.rows )
                continue ;
             int

   _4939411723264461086 =  
std ::

  round ( _16937465944335025110 [
_16992066382187640319 ]

  .pt.x )
  ;

             int

 _4939411723264461085 =     std ::

  round ( 
     _16937465944335025110 [

    _16992066382187640319 ]
 .pt.y )        ;

             if( 
    _4939411723264461086 <
     _11450180203511629323 ||

     _4939411723264461086+_11450180203511629323 >=  _1705492249324718059.cols )
                continue ;

             if(    _4939411723264461085 <
     _11450180203511629323 ||

   _4939411723264461085+_11450180203511629323 >=        _1705492249324718059.rows )
                continue ;

             int
    _192620453243540296 = 7 ;

             int
_3558714157307424502 = _192620453243540296*2+1 ;

            vector <

double >
        _15505236697521787868 ( 
_3558714157307424502 )
     ;

            cv ::

   Mat _10158787605014054164 =       _12800511165451773841 [

    0 ]

 ._8358128829407646415 (     cv ::

         Range (     _1588944432958720141-_11450180203511629323,_1588944432958720141+_11450180203511629323 )
   ,cv ::

   Range ( _1588944432958720138-_11450180203511629323,_1588944432958720138+_11450180203511629323 )
    )
 ;

             int

 _1522763743271507664 =      std ::

max ( 
         -_192620453243540296,-_4939411723264461086 )
      ;

             int
    _1522768890174422034 =  std ::
    min (_192620453243540296,_1705492249324718059.cols-1-_4939411723264461086 )
  ;

             double

    _3817788760850917717 = std ::

numeric_limits < double >
        ::

  max () ;

             int

     _1700310074658306154 =        -1 ;

             for( 
 int _46082575015037928 = _1522763743271507664 ;

       _46082575015037928 <= _1522768890174422034 ;

       _46082575015037928 ++ )
  {

                 int
  _6806984958533886427 =   _46082575015037928+_192620453243540296 ;

                 int

_175247759696 =  
_4939411723264461086+_46082575015037928 ;
                cv ::
   Mat _3285624572702585059 =  
_12800511165451773841 [
      1 ] ._8358128829407646415 ( 
    cv ::

     Range ( 
        _4939411723264461085-_11450180203511629323,_4939411723264461085+_11450180203511629323 )
    ,cv ::
     Range ( 
   _175247759696-_11450180203511629323,_175247759696+_11450180203511629323 )        )
      ;

                cv ::

Mat _16937296004896083966 ;

                cv ::

     absdiff (   _10158787605014054164,_3285624572702585059,_16937296004896083966 )
 ;

                 double
_6175753848998664490 = cv ::

       sum ( 
  _16937296004896083966 )
  [

  0 ]
        ;

                 if( 
   _6175753848998664490 <

    _3817788760850917717 )
  {

                    _3817788760850917717 = _6175753848998664490 ;

                    _1700310074658306154 =     _6806984958533886427 ;

                 }
                _15505236697521787868 [

  _6806984958533886427 ]

      =  
_6175753848998664490 ;

             }

             if( 
  _1700310074658306154 >

_1522763743271507664+_192620453243540296 &&

       _1700310074658306154 <

 _1522768890174422034+_192620453243540296 )
  {

                 double
       _175247759918 =         _15505236697521787868 [

        _1700310074658306154-1 ]

          ;

                 double

    _175247759917 =  
_15505236697521787868 [

  _1700310074658306154 ] ;

                 double

  _175247759916 =  
_15505236697521787868 [

 _1700310074658306154+1 ]
     ;

                 double

    _16989176769678974579 =   0.5* ( 
     _175247759918-_175247759916 )
     / ( 
    _175247759918+_175247759916-2*_175247759917 )
 +_1700310074658306154-_192620453243540296 ;

                 double
      _3378217371725605483 =    _16937465944335025110 [
_16992066382187640319 ]

        .pt.x+_16989176769678974579 ;

                _46082543180066935.depth [

 _2654435874 ]

          = ( _175247760147.bl*_175247760147.fx ()
        )
  / ( 
 _46082543180066935.und_kpts [
   _2654435874 ]

  .pt.x-_3378217371725605483 )
       ;

                _14197860223095419442 ++
      ;

             }

         }

     }

  }

 void

FrameExtractor ::

    process_rgbd ( 
  const cv ::
 Mat &_46082544231248938, const cv ::

        Mat &_14382598117525421800,const ImageParams &_175247760147,Frame &_46082543180066935, uint32_t _9933887380370137445 ) {
    _14329080428242784455 ( 1,_46082544231248938,_175247760147 )
     ;

    _17131366770609715580 ( 
_12800511165451773841 [

  0 ]
     ,_46082543180066935,_9933887380370137445 )
  ;

    _46082543180066935.depth.resize (     _46082543180066935.und_kpts.size ()
 ) ;

     for( 
   size_t _2654435874 =         0 ;

 _2654435874 < _46082543180066935.depth.size () ;

    _2654435874 ++

         )
        _46082543180066935.depth [

 _2654435874 ]

     =       0 ;

     for( 
size_t _2654435874 =    0 ;

   _2654435874 <

  _46082543180066935.kpts.size ()      ;

 _2654435874 ++

  )
      {

         if

  ( _14382598117525421800.at <

   uint16_t >

   ( _46082543180066935.kpts [

   _2654435874 ]

       )
      !=        0 )
     {

            _46082543180066935.depth [
      _2654435874 ]

  =       _14382598117525421800.at <

  uint16_t >

 ( 
     _46082543180066935.kpts [
 _2654435874 ]

       )
*_175247760147.rgb_depthscale ;

         }

     }

 }

 void
  FrameExtractor ::

     process ( 
    const cv ::

      Mat &_46082544231248938, const ImageParams &_175247760147,Frame &_46082543180066935, uint32_t

     _9933887380370137445 )
 {

    _14329080428242784455 ( 
     _13116459431724108758.kptImageScaleFactor, _46082544231248938,_175247760147 )  ;

    _17131366770609715580 ( 
   _12800511165451773841 [

    0 ]

 ,_46082543180066935,_9933887380370137445 )
  ;

 }

 void

FrameExtractor ::
  _10230054520346001887 (  float _17370277987955713200,const std ::

  vector <

 cv ::

       Mat > &_3005401535270843804,const ImageParams &_175247760147 )   {
     for( 
     uint _2654435874 =    0 ;
       _2654435874 < _175247760147.multicams_cs.size ()
    ;

     _2654435874 ++
        )
    _12800511165451773841.resize ( _3005401535270843804.size ()
      )
   ;

     for( 
uint _2654435874 =   0 ;
    _2654435874 <

 _3005401535270843804.size ()  ;

 _2654435874 ++

     )
      {

         if( 
         _3005401535270843804 [

     _2654435874 ]

     .channels ()
    == 3 )
            cv ::

     cvtColor ( 
  _3005401535270843804 [

  _2654435874 ]

,_12800511165451773841 [

_2654435874 ]

    ._15530082771795719302,CV_BGR2GRAY )       ;

         else

   _12800511165451773841 [

     _2654435874 ]
   ._15530082771795719302 =  _3005401535270843804 [

   _2654435874 ]

   ;

     }

    _12800511165451773841 [

 0 ]
     ._15530082765074651952 =   _175247760147 ;

    _12800511165451773841 [

   0 ]
  ._5505640830793117477 = _175247760147 ;

     if( 
fabs ( 
 1-_17370277987955713200 )
 >

  1e-3 )     {

         for( 
  uint _2654435874 =   0 ;

   _2654435874 <

    _3005401535270843804.size ()
   ;

  _2654435874 ++

     )
  {

            cv ::

Size _175247759442 ( 
 _3005401535270843804 [

      _2654435874 ]
     .cols*_17370277987955713200,_3005401535270843804 [

  _2654435874 ]

     .rows*_17370277987955713200 )
  ;

             if( 
_175247759442.width%4 !=   0 )
                _175247759442.width += 4-_175247759442.width%4 ;

             if( 
_175247759442.height%2 !=   0 )
     _175247759442.height ++

 ;

            cv ::

     resize ( 
   _12800511165451773841 [

   _2654435874 ]

 ._15530082771795719302,_12800511165451773841 [

  _2654435874 ]
  ._8358128829407646415,_175247759442 )
   ;

            _12800511165451773841 [

   0 ]

  ._5505640830793117477.resize ( 
    _175247759442, _2654435874 )
  ;

            _12800511165451773841 [
      _2654435874 ]
       ._6972553715263421613.first =  float ( 
_175247759442.height )     /float ( 
    _3005401535270843804 [

   _2654435874 ]

   .rows ) ;

            _12800511165451773841 [
    _2654435874 ]
._6972553715263421613.second =      float ( _175247759442.width )
  /float ( 
_3005401535270843804 [
_2654435874 ]
   .cols )
    ;

         }

     }

    else {

         for( 
    uint _2654435874 =   0 ;
 _2654435874 <
   _12800511165451773841.size ()
 ;

  _2654435874 ++

    ) {
            _12800511165451773841 [

     _2654435874 ]

   ._8358128829407646415 =    _12800511165451773841 [

         _2654435874 ]
    ._15530082771795719302 ;

            _12800511165451773841 [

 _2654435874 ]

         ._6972553715263421613 = std ::

  pair <
       float,float >

  ( 
 1,1 )
    ;

         }

     }

     float

   _706246336197678 =           ( 
 _12800511165451773841 [

         0 ] ._15530082765074651952.fx ( 
     0 )
+_12800511165451773841 [
      0 ]

 ._15530082765074651952.fy ( 
0 )
        ) / (   _12800511165451773841 [

  0 ] ._15530082765074651952.fx ( 
   1 )
 +_12800511165451773841 [

      0 ]

     ._15530082765074651952.fy ( 
1 )    )     ;

     if( 
_706246336197678 !=    1 )
     {

         int
  _11093822060392 =  1 ;

         if( 
 _706246336197678 >

   1 )
  {

            _11093822060392 =         0 ;

            _706246336197678 = 1.0/_706246336197678 ;

         }

        cv ::

 Size _175247759442 ( 
  _12800511165451773841 [

    _11093822060392 ]

       ._8358128829407646415.cols*_706246336197678, _12800511165451773841 [
 _11093822060392 ]

._8358128829407646415.rows*_706246336197678 )
  ;

        cv ::

      resize ( 
         _12800511165451773841 [

       _11093822060392 ]

  ._8358128829407646415,_12800511165451773841 [

    _11093822060392 ]

     ._8358128829407646415,_175247759442 )
 ;

        _12800511165451773841 [
    _11093822060392 ]

._6972553715263421613.first =   float (  _175247759442.height )
 /float ( 
     _3005401535270843804 [

    _11093822060392 ]
.rows )
      ;

        _12800511165451773841 [

_11093822060392 ]

   ._6972553715263421613.second =   float ( 
 _175247759442.width ) /float ( 
   _3005401535270843804 [

_11093822060392 ]

.cols )
          ;

        _12800511165451773841 [

   0 ]

 ._5505640830793117477.resize (    _175247759442, _11093822060392 )
     ;

     }

 }

 void

 FrameExtractor ::
_14329080428242784455 (   float _17370277987955713200,const cv :: Mat &_11093822404769,const ImageParams &_175247760147,const cv ::

Mat &_11093822404770 )
 {

     int

 _175247759468 = 1 ;

     if( 
 ! _11093822404770.empty ()
   )
        _175247759468 ++

   ;

    _12800511165451773841.resize ( 
   _175247759468 )
     ;

     if(  _11093822404769.channels ()
     ==     3 )
        cv ::

  cvtColor ( _11093822404769,_12800511165451773841 [
0 ]

._15530082771795719302,CV_BGR2GRAY )    ;

     else

    _12800511165451773841 [

        0 ] ._15530082771795719302 =     _11093822404769 ;

    _12800511165451773841 [

    0 ]

   ._15530082765074651952 =      _175247760147 ;

     if( !

       _11093822404770.empty ()  )     {

         if( _11093822404770.channels ()       ==         3 )
            cv ::

  cvtColor ( 
        _11093822404770,_12800511165451773841 [
    1 ]
   ._15530082771795719302,CV_BGR2GRAY )
       ;

         else

     _12800511165451773841 [

 1 ]

._15530082771795719302 =     _11093822404770 ;

        _12800511165451773841 [

  1 ]
       ._15530082765074651952 =    _175247760147 ;

     }

     if( fabs (   1-_17370277987955713200 )       >

1e-3 )
   {

        cv ::

   Size _175247759442 ( 
  _11093822404769.cols*_17370277987955713200,_11093822404769.rows*_17370277987955713200 )
  ;

         if( 
_175247759442.width%4 != 0 )
            _175247759442.width +=     4-_175247759442.width%4 ;

         if( 
_175247759442.height%2 != 0 )
 _175247759442.height ++

 ;

        cv ::

 resize ( _12800511165451773841 [
       0 ]

     ._15530082771795719302,_12800511165451773841 [

   0 ]

 ._8358128829407646415,_175247759442 )
          ;

        _12800511165451773841 [

    0 ]

._5505640830793117477 = _12800511165451773841 [ 0 ]

._15530082765074651952 ;

        _12800511165451773841 [

0 ]

    ._5505640830793117477.resize ( 
      _175247759442 ) ;

        _12800511165451773841 [

  0 ]
       ._6972553715263421613.first =          float ( 
 _175247759442.height )/float ( 
    _11093822404769.rows )
     ;

        _12800511165451773841 [
0 ]

     ._6972553715263421613.second =     float ( 
 _175247759442.width )
   /float ( 
        _11093822404769.cols )
   ;

         if(!

    _11093822404770.empty ()
   )       {

            cv ::
     resize ( 
   _12800511165451773841 [

   1 ]

._15530082771795719302,_12800511165451773841 [

1 ]

._8358128829407646415,_175247759442 )        ;

            _12800511165451773841 [

1 ]

       ._5505640830793117477 =   _12800511165451773841 [
   2 ]

    ._15530082765074651952 ;
            _12800511165451773841 [
    1 ]
     ._5505640830793117477.resize ( 
     _175247759442 )
 ;

            _12800511165451773841 [

1 ]

    ._6972553715263421613.first =     float ( _175247759442.height )
  /float ( 
_11093822404770.rows )
  ;

            _12800511165451773841 [
   1 ]

._6972553715263421613.second =   float ( 
        _175247759442.width )
    /float ( 
   _11093822404770.cols )
   ;

         }
     }

    else {

         for(  int _2654435874 = 0 ;

   _2654435874 <

_12800511165451773841.size ()
     ;
    _2654435874 ++

     )
         {

            _12800511165451773841 [

   _2654435874 ]

   ._8358128829407646415 =     _12800511165451773841 [

  _2654435874 ]

  ._15530082771795719302 ;

            _12800511165451773841 [

_2654435874 ]

    ._5505640830793117477 =    _12800511165451773841 [

    _2654435874 ]

   ._15530082765074651952 ;

            _12800511165451773841 [
     _2654435874 ]

 ._6972553715263421613 =         std ::
      pair <
    float,float >

    ( 
1,1 ) ;

         }

     }

  }

 void

     FrameExtractor ::

   _17131366770609715580 ( 
      const _1921178215606755952 &_46082576028426834, Frame &_46082543180066935, uint32_t
      _9933887380370137445 )
   {

    _46082543180066935.clear ()
  ;

    vector <

   cv ::

KeyPoint >

      _9811310495564694013 ;

    std ::

     thread _15593584088352382451 (   [

      & ]

      {

         if( 
   _4309197024622458338 )
  {

            _8033463663468506753 ->
       detectAndCompute ( 
   _12800511165451773841 [

    0 ]

    ._8358128829407646415,cv ::

Mat () ,_9811310495564694013,_46082543180066935.desc,_10675870925382111478 )
      ;

            _46082543180066935.KpDescType =   _8033463663468506753 ->

    getDescriptorType ()
   ;

         }

     }

 )
   ;

    std ::

  thread _5221495899814560498 ( 
      [

     & ]

          {

         if

 ( 
_3566717627060593117 )
     {
             auto

     _6807036698426592110 =  
_8000946946827829134 ->

        detect ( 
  _46082576028426834._15530082771795719302 )
         ;

             for( 
         const auto&_2654435878:_6807036698426592110 )
   {

                ucoslam ::

MarkerObservation _8214686538440707422 ;

                _8214686538440707422.id =  
_2654435878.id ;

                _8214686538440707422.points3d = _2654435878.points3d ;

                _8214686538440707422.corners =    _2654435878.corners ;

                _8214686538440707422.dict_info = _2654435878.info ;

                 auto

  _706246330434227 =  
IPPE ::

        solvePnP_ (   _2654435878.points3d ,_2654435878.corners, _46082576028426834._15530082765074651952.CameraMatrix,_46082576028426834._15530082765074651952.Distorsion )
  ;

                 for( 
int _2654435866 = 0 ; _2654435866 <

      2 ;

    _2654435866 ++
 )
   {

                    _8214686538440707422.poses.errs [

   _2654435866 ]

  =     _706246330434227 [

  _2654435866 ]

.second ;

                    _8214686538440707422.poses.sols [

 _2654435866 ]

     =   _706246330434227 [

 _2654435866 ]
       .first.clone ()
    ;

                 }

                _8214686538440707422.poses.err_ratio =     _706246330434227 [
1 ]

 .second/_706246330434227 [
       0 ]

      .second ;

                 for( 
auto &_2654435868:_8214686538440707422.corners )
   {

                    _2654435868.x *=     _46082576028426834._6972553715263421613.first ;

                    _2654435868.y *=    _46082576028426834._6972553715263421613.second ;

                 }

                _46082543180066935.markers.push_back ( 
_8214686538440707422 )
     ;
             }

         }

     }

     )
   ;

    _15593584088352382451.join ()
  ;

    _5221495899814560498.join ()
   ;

     if

    ( 
  debug ::
   Debug ::
    getLevel ()
     >=  100 ||

  _13116459431724108758.saveImageInMap )
   {

            std ::

 vector <

   uchar >

         _11093821971029 ;

            cv ::

imencode ( 
  "\x2e\x6a\x70\x67",_46082576028426834._15530082771795719302,_11093821971029, {

cv ::

   IMWRITE_JPEG_QUALITY,90 }

   )
  ;

            _46082543180066935.jpeg_buffer.create ( 
   1,_11093821971029.size ()
   ,CV_8UC1 )
         ;

            mempcpy ( 
     _46082543180066935.jpeg_buffer.ptr <

       uchar > ( 
     0 )
,&_11093821971029 [ 0 ]
     ,_11093821971029.size ()
  )
 ;

     }
    _46082543180066935.scaleFactors.resize ( 
_8033463663468506753 ->

  getParams () .nOctaveLevels )
     ;

     double

 _175247759750 =       _8033463663468506753 -> getParams ()
   .scaleFactor ;

    _46082543180066935.scaleFactors [
  0 ]

     =  1 ;

     for( 
   size_t _2654435874 = 1 ;

_2654435874 <

  _46082543180066935.scaleFactors.size ()  ;
    _2654435874 ++

  )        _46082543180066935.scaleFactors [

   _2654435874 ]

     =  _46082543180066935.scaleFactors [
    _2654435874-1 ]

  *_175247759750 ;

     if

          (     _9811310495564694013.size ()
  >

   0 )
   {

        vector <

        cv ::

 Point2f >

  _11093822294365 ;
      _11093822294365.reserve ( 
_9811310495564694013.size ()
      )
 ;

         for( 
    auto _2654435881:_9811310495564694013 )
     _11093822294365.push_back ( 
 _2654435881.pt )
         ;

        _12800511165451773841 [

         0 ]
._5505640830793117477.undistortPoints ( 
 _11093822294365 )
     ;

        _46082543180066935.und_kpts =       _9811310495564694013 ;

        _46082543180066935.kpts.resize ( 
 _9811310495564694013.size ()
 )
       ;

         for

  ( 
 size_t _2654435874 = 0 ;

    _2654435874 <

    _9811310495564694013.size ()
    ;

    _2654435874 ++

   )        {

            _46082543180066935.kpts [

   _2654435874 ]

  = _9811310495564694013 [

     _2654435874 ]

.pt ;

            _46082543180066935.und_kpts [ _2654435874 ]

 .pt =    _11093822294365 [
    _2654435874 ]

         ;

         }

     }

     for( 
    auto &_2654435878:_46082543180066935.markers )     {

        _2654435878.und_corners =    _2654435878.corners ;

        _12800511165451773841 [

   0 ]

    ._5505640830793117477.undistortPoints ( 
  _2654435878.und_corners )      ;

     }

    _46082543180066935.flags.resize ( 
    _46082543180066935.und_kpts.size ()  )
 ;

     for( 
 auto &_2654435887:_46082543180066935.flags )
   _2654435887.reset ()
      ;

    _46082543180066935.ids.resize ( 
    _46082543180066935.und_kpts.size ()
      )
  ;

     uint32_t

      _706246332827243 = std ::

   numeric_limits <

    uint32_t >

 ::

    max ()
   ;

     for( 
 auto &_11093822405034:_46082543180066935.ids )
  _11093822405034 =    _706246332827243 ;

    _46082543180066935.idx =      std ::

  numeric_limits <

     uint32_t >

     ::

  max ()
      ;

    _46082543180066935.fseq_idx =       _9933887380370137445 ;

    _46082543180066935.imageParams =       _12800511165451773841 [
 0 ]

      ._5505640830793117477 ;

    _46082543180066935.create_kdtree () ;

    _46082543180066935.minXY =        cv ::
      Point2f ( 
   0,0 )
 ;

    _46082543180066935.maxXY =   cv ::

Point2f ( _46082543180066935.imageParams.CamSize.width,_46082543180066935.imageParams.CamSize.height )     ;

     if(  _46082543180066935.imageParams.Distorsion.total () !=  0 )
    {

        vector <

cv ::

    Point2f >

    _6806985041881495917 = {
   _46082543180066935.minXY,_46082543180066935.maxXY }
     ;

        _46082543180066935.imageParams.undistortPoints (    _6806985041881495917 )
  ;

        _46082543180066935.minXY = _6806985041881495917 [

0 ]
   ;

        _46082543180066935.maxXY =   _6806985041881495917 [ 1 ]

 ;

     }

 }

 }