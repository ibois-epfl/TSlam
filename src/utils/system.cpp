#include <list>
#include <fstream>
#include <opencv2/imgproc/imgproc.hpp>
#include <aruco/markermap.h>
#include "utils/system.h"
#include "basictypes/misc.h"
#include "basictypes/debug.h"
#include "basictypes/timers.h"
#include "optimization/pnpsolver.h"
#include "optimization/globaloptimizer.h"
#include "optimization/ippe.h"
#include "basictypes/io_utils.h"
#include "map_types/keyframedatabase.h"
#include "utils/mapinitializer.h"
#include "utils/mapmanager.h"
#include "map.h"
#include "basictypes/se3.h"
#include "basictypes/osadapter.h"
#include "map_types/covisgraph.h"
#include "utils/frameextractor.h"
#include "basictypes/hash.h"

 namespace

     ucoslam {

   Params System ::

_14938569619851839146 ;

   Params & System ::

  getParams ()
     { return _14938569619851839146 ;

        }

    uint32_t

       System :: getCurrentKeyFrameIndex ()

     {

  return _10576739190144361304 ;

    }

   std ::
       shared_ptr <

 Map >

 System ::

getMap () {
     return _9098980761384425343 ;

    }

System ::

    System ()

 {

    _3944249282595574931 =

       std ::
       make_shared < FrameExtractor >

      ()

  ;

     _2044193291895307872 =
      std ::
make_shared <

   MapInitializer > ()

  ;

     _2869602498954317713 = std ::

    make_shared <
      MapManager > ()

 ;

     _1320287184975591154 =

std ::

   make_shared <

ucoslam ::

       STagDetector >

        ()

        ;

 }

System ::

      ~

   System ()
    {

    waitForFinished ()
    ;

 }
 void

   System :: _14789688456123595594 ()

     {

    _14938569619851839146.nthreads_feature_detector = max (

    1,_14938569619851839146.nthreads_feature_detector )

  ;

    std ::
      shared_ptr <

   Feature2DSerializable >

  _15583457929083796945 =

 Feature2DSerializable ::

    create (

    _14938569619851839146.kpDescriptorType )

          ;

    _15583457929083796945 -> setParams (

    _14938569619851839146.extraParams ) ;

    _14938569619851839146.maxDescDistance =
  _15583457929083796945 ->

   getMinDescDistance ()
     ;

    _3944249282595574931 ->

  setParams ( _15583457929083796945, _14938569619851839146,_1320287184975591154 )

      ;

    _3944249282595574931 ->
   removeFromMarkers ()

        =

    _14938569619851839146.removeKeyPointsIntoMarkers ;

    _3944249282595574931 ->

  detectMarkers ()

    =
    _14938569619851839146.detectMarkers ;

    _3944249282595574931 ->
     detectKeyPoints ()
     =

        _14938569619851839146.detectKeyPoints ;

 }

 void
       System ::

setParams (

     std ::

shared_ptr <

     Map >

     _11093822290287, const Params &_2654435881,const string &_4953871428288621283,std ::

shared_ptr <

 ucoslam ::

   MarkerDetector >

  _1516358670470627782 )

         {

    _9098980761384425343 =

 _11093822290287 ;

    _14938569619851839146 =

    _2654435881 ;

    _1320287184975591154 =

  _1516358670470627782 ;

     if(

    !

_1320287184975591154 )

        _1320287184975591154 =
      std ::

make_shared <
    STagDetector >
 (
 _14938569619851839146 )

 ;

    _14789688456123595594 () ;

     if

     (

  _9098980761384425343 ->

   isEmpty ()

  )

     {

        _3857178690860967008 =

    STATE_LOST ;

         if

      ( !
      _4953871428288621283.empty ()
      ) {

            _9098980761384425343 ->
       TheKFDataBase.loadFromFile (

     _4953871428288621283 )

   ;

         }

        MapInitializer ::
    Params _3005399798454910266 ;

         if

   (
  _14938569619851839146.forceInitializationFromMarkers )

            _3005399798454910266.mode =

    MapInitializer ::
 ARUCO ;

        else
            _3005399798454910266.mode =

      MapInitializer ::

    BOTH ;

        _3005399798454910266.minDistance =

         _14938569619851839146.minBaseLine ;

        _3005399798454910266.markerSize =

        _14938569619851839146.aruco_markerSize ;

        _3005399798454910266.aruco_minerrratio_valid =

  _14938569619851839146.aruco_minerrratio_valid ;

        _3005399798454910266.allowArucoOneFrame =

     _14938569619851839146.aruco_allowOneFrameInitialization ;

        _3005399798454910266.max_makr_rep_err =

    2.5 ;

        _3005399798454910266.minDescDistance =

  _14938569619851839146.maxDescDistance ;

        _2044193291895307872 ->

   setParams (

  _3005399798454910266 )

   ;

     }

    else
        _3857178690860967008 =
  STATE_LOST ;

 }

 void

   System ::

    waitForFinished ()

     {

 _2869602498954317713 ->

        stop ()

 ;

 _2869602498954317713 ->
  mapUpdate ()

 ;

  if(

      _2869602498954317713 -> bigChange ()

 )

     {

     _14938569046430841631.pose_f2g =

     _2869602498954317713 ->

   getLastAddedKFPose ()

 ;

     _17976495724303689842 =

    _14938569046430841631.pose_f2g ;

  }

 }

 void

     System ::

  resetTracker ()

  {

    waitForFinished ()

       ;

    _10576739190144361304 =

         -1 ;
    _17976495724303689842 =
se3 ()

    ;

    _3857178690860967008 = STATE_LOST ;

    _14938569046430841631.clear ()

      ;

    _4913157516830781457.clear ()

   ;

    _14463320619150402643 =

   cv ::

    Mat ()

 ;

    _10558050725520398793 =
       -1 ;

 }

cv :: Mat System ::

process (
 const Frame &_46082543180066935 )

     {

     se3 _16937225862434286412 =

   _17976495724303689842 ;

     if
       (

  (
void* )

  &_46082543180066935 !=

    (

        void* )

&_14938569046430841631 )

    {

        swap (

_4913157516830781457,_14938569046430841631 )

         ;
        _14938569046430841631 =

  _46082543180066935 ;

     }

     if

       (

_17450466964482625197 ==

  MODE_SLAM &&
        ! _2869602498954317713 ->

hasMap ()

 )

        _2869602498954317713 ->

   setParams (
 _9098980761384425343,_14938569619851839146.enableLoopClosure )

      ;

     if

   (

          !
      _14938569619851839146.runSequential &&

  _17450466964482625197 ==

   MODE_SLAM )

        _2869602498954317713 -> start ()

  ;

     for(

     auto &_175247760135:_4913157516830781457.ids )

         if

 (

      _175247760135 !=

        std ::
    numeric_limits < uint32_t >

  ::

max ()
        )
   {

             if

     (

 !

  _9098980761384425343 ->

map_points.is (

 _175247760135 )

 )

    _175247760135 =
      std :: numeric_limits <
   uint32_t >

    ::

     max ()
   ;

             else
     if(

     _9098980761384425343 -> map_points [

  _175247760135 ]

        .isBad ()
     )
 _175247760135 =

      std ::
numeric_limits <
   uint32_t >
    ::

 max ()

     ;

         }

     if(

_9098980761384425343 -> isEmpty ()

       &&
    _17450466964482625197 ==

    MODE_SLAM )

     {

         if

 (

         _2016327979059285019 (

 _14938569046430841631 )

       )

            _3857178690860967008 =

    STATE_TRACKING ;

     }

    else {

         if(

   _3857178690860967008 ==
   STATE_TRACKING )

      {

            _10576739190144361304 =

    _1513765969352381626 (

  _4913157516830781457,_17976495724303689842 )
      ;
            _17976495724303689842 =
       _11166622111371682966 (

   _14938569046430841631,_17976495724303689842 )

        ;

             if(
        !

  _17976495724303689842.isValid ()
        )

                _3857178690860967008 =

STATE_LOST ;

         }

         if

 (

     _3857178690860967008 ==
    STATE_LOST )
 {

            se3 _5564636146947005941 ;

             if

   (
      _16487919888509808279 (
    _14938569046430841631,_5564636146947005941 )

 )

      {

                _3857178690860967008 =

   STATE_TRACKING ;

                _17976495724303689842 =
_5564636146947005941 ;

                _10576739190144361304 =

         _1513765969352381626 ( _14938569046430841631,_17976495724303689842 )
        ;
                _10558050725520398793 =

 _14938569046430841631.fseq_idx ;

             }

         }

         if(
  _3857178690860967008 == STATE_TRACKING )

       {

            _14938569046430841631.pose_f2g =
   _17976495724303689842 ;

             if

      (

     _17450466964482625197 ==

    MODE_SLAM && (
    (

         _14938569046430841631.fseq_idx >=
_10558050725520398793+5 )
    ||

         (

     _10558050725520398793 ==
    -1 )

     )

   )

               _2869602498954317713 ->

newFrame ( _14938569046430841631,_10576739190144361304 )

  ;

         }

     }

     if(

        _3857178690860967008 ==

STATE_LOST &&

  _17450466964482625197 == MODE_SLAM &&

    _9098980761384425343 ->

    keyframes.size ()

     <=
  5 &&
  _9098980761384425343 ->

 keyframes.size ()

   !=
     0 )

   {

        _2869602498954317713 ->

        reset ()

 ;

        _9098980761384425343 -> clear ()

  ;

        _2044193291895307872 ->

   reset () ;

        _2869602498954317713 ->

   setParams (

  _9098980761384425343,_14938569619851839146.enableLoopClosure )

    ;

     }

      if

   (

   _3857178690860967008 ==

   STATE_TRACKING ) {

        _14463320619150402643 = cv :: Mat ::
    eye (
       4,4,CV_32F )

   ;
         if

    (

   _16937225862434286412.isValid ()

 ) {

            _14463320619150402643 =

   _17976495724303689842.convert ()

*_16937225862434286412.convert ()

     .inv ()

 ;

          }

     }

    else {

        _14463320619150402643 = cv ::

     Mat ()

   ;

     }
    _14938569046430841631.pose_f2g =

     _17976495724303689842 ;

     if(

      ++

        _13033649816026327368 >

     (

 10*4*12*34*6 )

      /2 )

        _17976495724303689842 = cv ::

  Mat ()

  ;

     if
        (

    _3857178690860967008 ==

STATE_LOST )

  return cv ::

    Mat ()

  ;

    else
         return
 _17976495724303689842 ;

 }

cv ::
 Mat System ::

    process (
  cv ::
  Mat &_6441194614667703750, const ImageParams &_18212413899834346676, uint32_t

 _9933887380370137445, const cv ::

 Mat & _46082575014988268, const cv ::

    Mat &_1705635550657133790 )

   {

    swap (

_4913157516830781457,_14938569046430841631 ) ;

    std ::

      thread _1403653089436386197 ;

     if

        ( _17450466964482625197 ==

 MODE_SLAM )

  _1403653089436386197 =
   std ::

         thread (

          [
 & ]
     ()
    {

         if( _2869602498954317713 ->

        mapUpdate ()

         )

        {

             if(

 _2869602498954317713 -> bigChange () )

  {

                _14938569046430841631.pose_f2g =
       _2869602498954317713 ->

     getLastAddedKFPose ()

   ;

                _17976495724303689842 =

   _2869602498954317713 ->

 getLastAddedKFPose ()
  ;

             }

         }

         ;

      }

  ) ;

     if

    (

   _46082575014988268.empty ()

  &&

 _1705635550657133790.empty ()

  )

      _3944249282595574931 ->

 process (

   _6441194614667703750,_18212413899834346676,_14938569046430841631,_9933887380370137445 )

        ;

     else

     if(

   _1705635550657133790.empty ()
        )

          _3944249282595574931 ->

   process_rgbd (

 _6441194614667703750,_46082575014988268,_18212413899834346676,_14938569046430841631,_9933887380370137445 )

 ;

     else
  _3944249282595574931 ->

processStereo (

    _6441194614667703750,_1705635550657133790,_18212413899834346676,_14938569046430841631,_9933887380370137445 )

       ;

     if(
  _14938569619851839146.autoAdjustKpSensitivity )

 {

         int

 _1699599737904718822 =

  _14938569619851839146.maxFeatures-_14938569046430841631.und_kpts.size ()

 ;

         if(
     _1699599737904718822 >

    0 )

  {
             float

    _46082575832048655 = 1.0f- ( float (

       _1699599737904718822 )

     /float (

  _14938569046430841631.und_kpts.size ()

    )

     )

    ;

             float

     _6148074839757474704 =

  _3944249282595574931 ->

   getSensitivity ()

   +_46082575832048655 ;

            _6148074839757474704 = std ::

        max (

  _6148074839757474704,1.0f )
      ;

            _3944249282595574931 ->

     setSensitivity (
    _6148074839757474704 )

  ;
         }

        else {

            _3944249282595574931 -> setSensitivity (

   _3944249282595574931 ->

   getSensitivity ()
      *0.95 )

   ;

         }
     }

     if
  (

        _17450466964482625197 ==

   MODE_SLAM )

   _1403653089436386197.join ()

    ;

    cv ::

 Mat _3005399805025936106 =

  process (

 _14938569046430841631 ) ;

     float

 _6154865401824487276 =
       sqrt ( float (
      _14938569046430841631.imageParams.CamSize.area ()

         )

   /float (

 _6441194614667703750.size ()

   .area ()

   )

   )
   ;

    _14031550457846423181 (

  _6441194614667703750,1./_6154865401824487276 )
   ;
     auto _5829441678613027716 =

   [

          ]

          (

   const uint32_t&_11093821926013 )
      {

         std ::

 stringstream _706246330191125 ;

     _706246330191125 <<

       _11093821926013 ;
      return

_706246330191125.str ()

         ;
     }

      ;

    _14938529070154896274 (

   _6441194614667703750,"\x4d\x61\x70\x20\x50\x6f\x69\x6e\x74\x73\x3a"+_5829441678613027716 (

 _9098980761384425343 ->

     map_points.size ()

     )

         ,cv ::

 Point (

 20,_6441194614667703750.rows-20 )
 )

  ;

    _14938529070154896274 (

   _6441194614667703750,"\x4d\x61\x70\x20\x4d\x61\x72\x6b\x65\x72\x73\x3a"+_5829441678613027716 (

    _9098980761384425343 ->

 map_markers.size ()

    )

        ,cv ::

     Point (

    20,_6441194614667703750.rows-40 )

   ) ;

    _14938529070154896274 (

_6441194614667703750,"\x4b\x65\x79\x46\x72\x61\x6d\x65\x73\x3a"+_5829441678613027716 (

     _9098980761384425343 ->

      keyframes.size ()

      )
       ,cv ::

    Point (

     20,_6441194614667703750.rows-60 )

          )

 ;

     int

_16937201858692939798 =
       0 ;

     for(
     auto _175247760135:_14938569046430841631.ids )

     if(

  _175247760135 !=
   std ::

    numeric_limits <

   uint32_t >

     ::
   max ()

         )

  _16937201858692939798 ++ ;

    _14938529070154896274 (
       _6441194614667703750,"\x4d\x61\x74\x63\x68\x65\x73\x3a"+ _5829441678613027716 (

 _16937201858692939798 ) ,cv ::

  Point (

 20,_6441194614667703750.rows-80 )

 )

      ;

     if(

      fabs (

 _6154865401824487276-1 )

    >

    1e-3 )

        _14938529070154896274 (

 _6441194614667703750,"\x49\x6d\x67\x2e\x53\x69\x7a\x65\x3a"+_5829441678613027716 (

    _14938569046430841631.imageParams.CamSize.width )
     +"\x78"+_5829441678613027716 (

       _14938569046430841631.imageParams.CamSize.height )

        ,cv ::
     Point (

    20,_6441194614667703750.rows-100 )

     )

  ;

     return
_3005399805025936106 ;

 }

cv ::

Mat System ::
 process (

 vector <

cv ::

    Mat >

       &_3005401535270843804, ImageParams &_4702029808027735906 , uint32_t

  _9933887380370137445 )

 {

    swap (
       _4913157516830781457,_14938569046430841631 )

    ;

    std ::

    thread _1403653089436386197 ;

     if

     ( _17450466964482625197 ==

 MODE_SLAM )

        _1403653089436386197 =

std ::

    thread (

      [

     & ] ()

 {

         if(

  _2869602498954317713 ->

     mapUpdate ()
      )

        {

             if(

   _2869602498954317713 ->

   bigChange ()

      ) {

                _14938569046430841631.pose_f2g = _2869602498954317713 ->

         getLastAddedKFPose ()

   ;
                _17976495724303689842 =

    _2869602498954317713 ->
getLastAddedKFPose ()

  ;

             }

         }

         ;

   }

     )
     ;

    _3944249282595574931 ->

   processArray (
      _3005401535270843804,_4702029808027735906, _14938569046430841631, _9933887380370137445, _2044193291895307872 )

  ;

     if(

      _14938569619851839146.autoAdjustKpSensitivity )

   {
    
         int
  _1699599737904718822 =

 _14938569619851839146.maxFeatures-_14938569046430841631.und_kpts.size ()

 ;

         if(
     _1699599737904718822 >

0 )

   {

             float

  _46082575832048655 =

 1.0f- (

   float (

  _1699599737904718822 )
   /float (
 _14938569046430841631.und_kpts.size ()

  )

      )

     ;

             float
   _6148074839757474704 =
      _3944249282595574931 ->

 getSensitivity ()

   +_46082575832048655 ;

            _6148074839757474704 =

  std ::

   max ( _6148074839757474704,1.0f )

     ;

            _3944249282595574931 ->

 setSensitivity (

  _6148074839757474704 )
      ;

         }

        else {

            _3944249282595574931 ->

  setSensitivity (

 _3944249282595574931 ->

 getSensitivity ()

 *0.95 )

 ;

         }

     }

     if
   ( _17450466964482625197 == MODE_SLAM )

_1403653089436386197.join ()

    ;

    cv ::

  Mat _3005399805025936106 = process (

   _14938569046430841631 )

   ;

     float

   _6154865401824487276 =

        sqrt (

   float (

_14938569046430841631.imageParams.CamSize.area ()

 ) /float (
_3005401535270843804 [ 0 ]

   .size ()

       .area ()

        )

      )

       ;

    _14031550457846423181 (

_3005401535270843804 [

0 ]

 ,1./_6154865401824487276 )

   ;

     auto

    _5829441678613027716 =

         [

     ]

  (
      const uint32_t&_11093821926013 )
     {
  std ::

         stringstream _706246330191125 ;
 _706246330191125 <<

  _11093821926013 ; return _706246330191125.str () ;

    }
       ;

    _14938529070154896274 (

     _3005401535270843804 [

  0 ]

       ,"\x4d\x61\x70\x20\x50\x6f\x69\x6e\x74\x73\x3a"+_5829441678613027716 (
    _9098980761384425343 ->

      map_points.size ()

 )

    ,cv ::

       Point (

  20,_3005401535270843804 [

0 ]

      .rows-20 )

    )

      ;

    _14938529070154896274 (
 _3005401535270843804 [

 0 ]

     ,"\x4d\x61\x70\x20\x4d\x61\x72\x6b\x65\x72\x73\x3a"+_5829441678613027716 (

    _9098980761384425343 ->

map_markers.size ()

 )

         ,cv ::

Point (
20,_3005401535270843804 [

     0 ]

    .rows-40 )

  )

     ;

    _14938529070154896274 (

    _3005401535270843804 [
       0 ]

  ,"\x4b\x65\x79\x46\x72\x61\x6d\x65\x73\x3a"+_5829441678613027716 (

     _9098980761384425343 ->

     keyframes.size ()

   )

    ,cv :: Point (

    20,_3005401535270843804 [

 0 ]

   .rows-60 )

  )

  ;

     int
       _16937201858692939798 =

   0 ;
     for(

     auto _175247760135:_14938569046430841631.ids )

    if(
   _175247760135 !=

  std ::

 numeric_limits <

uint32_t >
 ::

   max ()

          )
     _16937201858692939798 ++

 ;

    _14938529070154896274 (

  _3005401535270843804 [

  0 ]

 ,"\x4d\x61\x74\x63\x68\x65\x73\x3a"+ _5829441678613027716 (

     _16937201858692939798 )

   ,cv ::

      Point (
      20,_3005401535270843804 [

  0 ]
    .rows-80 )

        )

 ;
     if(

    fabs (

    _6154865401824487276-1 )

 >
    1e-3 )

        _14938529070154896274 (

     _3005401535270843804 [ 0 ]

    ,"\x49\x6d\x67\x2e\x53\x69\x7a\x65\x3a"+_5829441678613027716 (
     _14938569046430841631.imageParams.CamSize.width )

 +"\x78"+_5829441678613027716 (

         _14938569046430841631.imageParams.CamSize.height )

,cv ::

 Point (

  20,_3005401535270843804 [

   0 ]

   .rows-100 )

    )

 ;

     return

  _3005399805025936106 ;

 }

 void

      System ::

     _14938529070154896274 (
   cv ::

 Mat &_175247760140,string _706246331661728,cv ::

    Point _2654435881 )

    {

     float
 _706246308256699 =

float (
    _175247760140.cols )

      /float (
 1280 )

 ;
    cv ::

       putText (

         _175247760140,_706246331661728,_2654435881,cv ::

FONT_HERSHEY_SIMPLEX, 0.5*_706246308256699,cv ::
  Scalar (

 0,0,0 ) ,3*_706246308256699 )

 ;

    cv ::

  putText (

 _175247760140,_706246331661728,_2654435881,cv ::

     FONT_HERSHEY_SIMPLEX, 0.5*_706246308256699,cv ::

  Scalar (

   125,255,255 )
     ,1*_706246308256699 )

     ;

 }

string System ::

     getSignatureStr ()
const {

     return

    _2102381941757963317 (
     _13507858972549420551 ()

 )
      ;

 }

uint64_t System ::

         _13507858972549420551 ( bool _46082575779493229 )

   const {

    Hash _11093822380353 ;

    _11093822380353 += _9098980761384425343 ->

     getSignature (
_46082575779493229 )
     ;

     if(

     _46082575779493229 )
cout <<
       "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x2e\x20\x73\x69\x67\x3d" <<

  _11093822380353 <<

    endl ;

    _11093822380353 +=

     _14938569619851839146.getSignature ()

      ;

     if(
_46082575779493229 )

cout << "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x32\x2e\x20\x73\x69\x67\x3d" <<
      _11093822380353 <<
      endl ;

     for(

    int _2654435874 =

 0 ;
      _2654435874 <

    6 ;
_2654435874 ++

 )
   _11093822380353 +=

         _17976495724303689842 [

   _2654435874 ]
    ;

     if(
      _46082575779493229 )

  cout <<

 "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x33\x2e\x20\x73\x69\x67\x3d" << _11093822380353 <<

    endl ;

    _11093822380353.add (

        _10576739190144361304 )

 ;

     if(

 _46082575779493229 )

     cout <<

  "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x34\x2e\x20\x73\x69\x67\x3d" <<
 _11093822380353 <<

      endl ;

    _11093822380353 += _14938569046430841631.getSignature ()
       ;

     if(

  _46082575779493229 )

        cout <<

   "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x35\x2e\x20\x73\x69\x67\x3d" <<

         _11093822380353 <<

 endl ;

    _11093822380353 +=

   _13028158409047949416 ;

     if(

_46082575779493229 )

       cout <<

    "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x37\x2e\x20\x73\x69\x67\x3d" <<
     _11093822380353 <<

     endl ;

    _11093822380353 += _3857178690860967008 ;

     if(

    _46082575779493229 ) cout <<

    "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x38\x2e\x20\x73\x69\x67\x3d" <<
     _11093822380353 <<
 endl ;

    _11093822380353 +=

 _17450466964482625197 ;

     if(

     _46082575779493229 )

      cout <<

 "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x39\x2e\x20\x73\x69\x67\x3d" <<
     _11093822380353 <<

endl ;

    _11093822380353 +=
    _4913157516830781457.getSignature ()

 ;

     if(

    _46082575779493229 )

    cout <<

      "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x30\x2e\x73\x69\x67\x3d" <<

        _11093822380353 << endl ;

    _11093822380353 +=

  _2869602498954317713 ->

    getSignature ()

  ;

     if( _46082575779493229 )

cout <<

     "\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x31\x2e\x73\x69\x67\x3d" <<
_11093822380353 <<

  endl ;

    _11093822380353 +=

 _14463320619150402643 ;

    _11093822380353 +=

_10558050725520398793 ;

     if(

      _46082575779493229 )
   cout <<

"\x5c\x74\x53\x79\x73\x74\x65\x6d\x20\x31\x32\x2e\x73\x69\x67\x3d" <<

   _11093822380353 <<
   endl ;

     return

    _11093822380353 ;

 }

cv ::

 Mat System :: _4145838251597814913 (

     const Frame &_46082543180066935 )

    {

    std ::
    vector <

 uint32_t > _4240939334638385660 ;

    vector < pair <

  cv ::

 Mat,double >

      >
        _5923954032168212568 ;

    vector <

   cv ::

Point3f >

     _7045032207766252521 ;

    vector <

    cv ::

Point2f >

        _7045032207766252456 ;

     for(

   auto _2654435878:_46082543180066935.markers )
   {

         if

   ( _9098980761384425343 ->

   map_markers.find ( _2654435878.id )

   !=

     _9098980761384425343 ->

     map_markers.end ()
        )

          {

            ucoslam ::
   Marker &_6807036686937475945 =

   _9098980761384425343 ->

  map_markers [

        _2654435878.id ]

   ;

            cv ::
       Mat _9983235290341257781 =
 _6807036686937475945.pose_g2m ;

             auto
      _11093822296219 =

 _6807036686937475945.get3DPoints ()

         ;

            _7045032207766252521.insert (

   _7045032207766252521.end ()

     ,_11093822296219.begin ()
     ,_11093822296219.end ()

     )

          ;

            _7045032207766252456.insert (

        _7045032207766252456.end ()

   ,_2654435878.und_corners.begin ()

,_2654435878.und_corners.end ()

  )

 ;

             auto
_1515389571633683069 =

IPPE ::
 solvePnP (

 _14938569619851839146.aruco_markerSize,_2654435878.und_corners,_46082543180066935.imageParams.CameraMatrix,_46082543180066935.imageParams.Distorsion )

  ;

             for(
auto _16937226146608628973:_1515389571633683069 )

                _5923954032168212568.push_back (

      make_pair (

         _16937226146608628973 * _9983235290341257781.inv ()

,-1 )
     )

        ;

         }
     }

     if
     ( _7045032207766252521.size ()

 ==

 0 )
   return cv ::

       Mat ()

     ;

     for(

   auto &_46082575779853237:_5923954032168212568 )

   {

        vector <
 cv ::

 Point2f >

          _1535067723848375914 ;

        se3 _16937226146609453200 =

    _46082575779853237.first ;

        project (

 _7045032207766252521,_46082543180066935.imageParams.CameraMatrix,_16937226146609453200.convert ()
      ,_1535067723848375914 )
 ;

        _46082575779853237.second =

    0 ;

         for(

  size_t _2654435874 =

  0 ;
  _2654435874 <
     _1535067723848375914.size ()
  ;

_2654435874 ++

 )

            _46082575779853237.second +=

   (

    _1535067723848375914 [

   _2654435874 ]

    .x- _7045032207766252456 [

_2654435874 ]

        .x )

    * (

 _1535067723848375914 [

   _2654435874 ]
  .x- _7045032207766252456 [

 _2654435874 ]

  .x )

     + (

_1535067723848375914 [

   _2654435874 ]

    .y- _7045032207766252456 [

 _2654435874 ]

        .y ) * (

     _1535067723848375914 [
   _2654435874 ]

.y- _7045032207766252456 [

   _2654435874 ]

.y )
        ;

     }

    std ::
       sort (

 _5923954032168212568.begin ()

  ,_5923954032168212568.end () , [

         ]
 (

const pair <

  cv ::

        Mat,double >

   &_2654435866,const pair <
      cv ::
  Mat,double >

     &_2654435867 )
 {

   return _2654435866.second <

   _2654435867.second ;

      }
  )

         ;

     return

     _5923954032168212568 [ 0 ]
     .first ;

 }

 bool

     System ::

    _2016327979059285019 (
     Frame &_175247759917 )

     {

 bool
   _11093822302335 ;

     if

   (

    _175247759917.imageParams.isStereoCamera ()

   ||

 _175247759917.imageParams.isArray ()
   )

     {

          _11093822302335 =

_15186594243873234013 (

     _175247759917 )

      ;

     }

    else {

        _11093822302335 =

_14954361871198802778 (

_175247759917 )

       ;

     }

     if(

      !

    _11093822302335 )

  return _11093822302335 ;

    _17976495724303689842 = _9098980761384425343 ->

   keyframes.back ()

   .pose_f2g ;

    _10576739190144361304 =

    _9098980761384425343 -> keyframes.back ()
    .idx ;

    _13028158409047949416 = true ;

   return
     true ;

 }

 bool

   System ::

   _14954361871198802778 (
       Frame &_175247759917 )

     {

     if (
 !

     _2044193291895307872 ->

    process (

  _175247759917,_9098980761384425343 )

     )

   return

   false ;

         if

    (

      _9098980761384425343 ->

keyframes.size ()
 >

     1 &&

    _9098980761384425343 -> map_points.size ()

    >
       0 )

     {

        _175247759917.ids =

   _9098980761384425343 ->

keyframes.back ()

  .ids ;

     }

    globalOptimization ()
   ;

     if

  (

     _9098980761384425343 ->

map_markers.size ()

     ==

     0 )

  {

         if

    ( _9098980761384425343 ->
  map_points.size ()
       <

50 )

    {

            _9098980761384425343 ->

   clear ()

 ;

             return

    false ;

         }

         float

_7847018097084079275 =

    1./_9098980761384425343 ->

   getFrameMedianDepth (

_9098980761384425343 ->

   keyframes.front ()

   .idx )

      ;

        cv ::

 Mat _706246338944062 =

   _9098980761384425343 ->

     keyframes.back ()

   .pose_f2g.inv ()
  ;

        _706246338944062.col (

 3 )
    .rowRange (
  0,3 )

       = _706246338944062.col (

    3 )
 .rowRange (

       0,3 )

   *_7847018097084079275 ;

        _9098980761384425343 ->
     keyframes.back ()

        .pose_f2g =

  _706246338944062.inv ()

      ;

          for(

auto &_175247759380:_9098980761384425343 ->

  map_points )

       {

            _175247759380.scalePoint (
 _7847018097084079275 )

    ;

         }

     }

    _17976495724303689842 =

    _9098980761384425343 ->

  keyframes.back ()

  .pose_f2g ;

       return

    true ;

 }

 bool

        System ::

 _15186594243873234013 (

 Frame &_46082543180066935 )

   {

     if(
    _14938569619851839146.KPNonMaximaSuppresion )

        _46082543180066935.nonMaximaSuppresion ()
   ;

     int

 _8065948040949117953 =

0 ;

     for(

    size_t _2654435874 =

0 ;

_2654435874 <

   _46082543180066935.und_kpts.size ()

  ;
  _2654435874 ++
    )

     {

         if
        ( _46082543180066935.getDepth (
    _2654435874 )

   >

   0 &&

 _46082543180066935.imageParams.isClosePoint (
  _46082543180066935.getDepth (

   _2654435874 )

  )

   &&

          !
  _46082543180066935.flags [ _2654435874 ]
    .is ( Frame ::

 FLAG_NONMAXIMA )

   )

            _8065948040949117953 ++

  ;

     }

     if (

 _8065948040949117953 <

   100 )
        return

   false ;

    _46082543180066935.pose_f2g.setUnity ()
      ;

    Frame & _16997199184281837438 =
     _9098980761384425343 ->

   addKeyFrame (

 _46082543180066935 )

     ;

     for(

  size_t _2654435874 =

      0 ;

 _2654435874 <

   _46082543180066935.und_kpts.size ()

     ;

     _2654435874 ++

     )
     {

        cv ::
       Point3f _2654435881 ;

         if (

     _46082543180066935.getDepth (
  _2654435874 )

  > 0 &&

     _46082543180066935.imageParams.isClosePoint (

 _46082543180066935.getDepth (

    _2654435874 )

    )

    &&

        !

         _46082543180066935.flags [
   _2654435874 ]

   .is (

    Frame ::

  FLAG_NONMAXIMA ) )

 {

            _2654435881 =
      _46082543180066935.get3dStereoPoint (
  _2654435874 )

 ;

             auto
&_175247759380 =

  _9098980761384425343 ->
     addNewPoint ( _16997199184281837438.fseq_idx )

  ;

            _175247759380.kfSinceAddition =

 1 ;

            _175247759380.setCoordinates (

      _2654435881 )
    ;

            _175247759380.setStereo (
     true )
      ;

            _9098980761384425343 ->

       addMapPointObservation (
_175247759380.id,_16997199184281837438.idx,_2654435874 )

         ;

            _46082543180066935.ids [

  _2654435874 ]

    =
 _175247759380.id ;
         }

     }

     for( const auto

&_2654435878:_46082543180066935.markers )

      {

        _9098980761384425343 ->
      addMarker (

  _2654435878 )
 ;
     }

     return

       true ;

 }

string System ::
       _2102381941757963317 (

uint64_t _11093822380353 )
  const {

    string _706246330193866 ;

    string _46082576163156525 =
  "\x71\x77\x65\x72\x74\x79\x75\x69\x6f\x70\x61\x73\x64\x66\x67\x68\x6a\x6b\x6c\x7a\x78\x63\x76\x62\x6e\x6d\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x51\x57\x45\x52\x54\x59\x55\x49\x4f\x50\x41\x53\x44\x46\x47\x48\x4a\x4b\x4c\x5a\x58\x43\x56\x42\x4e\x4d" ;

    uchar * _2654435884 =
 (

 uchar * ) &_11093822380353 ;

     int

  _2654435879 =
       sizeof (

   _11093822380353 )
       /sizeof (

    uchar )

     ;

     for(

int _2654435874 =

   0 ;

  _2654435874 <

 _2654435879 ;

  _2654435874 ++ )

   {

        _706246330193866.push_back (
       _46082576163156525 [

 _2654435884 [

_2654435874 ]

 %_46082576163156525.size ()

          ]

  ) ;

     }

     return
   _706246330193866 ;

 }

 uint32_t

   System ::

  _1513765969352381626 (

  const Frame &_10614055813325501077, const se3 &_10706799483371532009 )

         {

    int64_t _644211886852851457 =

   -1 ;

     if

 (

_14938569619851839146.detectKeyPoints )

       _644211886852851457 =

       _9098980761384425343 -> getReferenceKeyFrame (

 _10614055813325501077,1 )

  ;
     if (
 _644211886852851457 !=

        -1 )

    return
       _644211886852851457 ;

     if
       (

  _9098980761384425343 ->

       map_markers.size ()
        ==

  0 )

    {

         return
      _10576739190144361304 ;

     }

    vector <
       uint32_t >

 _4240713669852012646 ;

     for(
    auto _2654435878:_10614055813325501077.markers ) {

         auto

     _3005399795337363304 =

    _9098980761384425343 ->

  map_markers.find (

     _2654435878.id )

  ;

         if (

          _3005399795337363304 !=

_9098980761384425343 ->

 map_markers.end ()

          )

 {

             if (

  _3005399795337363304 ->

  second.pose_g2m.isValid ()
      )

     _4240713669852012646.push_back (

 _2654435878.id )

    ;

         }

     }

    pair <

       uint32_t,float >
    _18337238202410394478 (

       std ::

   numeric_limits <

         uint32_t >
  ::

  max ()

   ,std ::
    numeric_limits <

   float >

   ::
   max ()

   )

 ;

     for(

 auto _3005399795337363304:_4240713669852012646 )

         for( const auto

  &_46082543180066935:_9098980761384425343 ->

map_markers [

_3005399795337363304 ]

.frames ) {

             auto

_2654435869 =

      _10706799483371532009 .t_dist (

         _9098980761384425343 ->

 keyframes [ _46082543180066935 ]

.pose_f2g )
      ;

             if
    (
     _18337238202410394478.second >
 _2654435869 )

  _18337238202410394478 =

     {

_46082543180066935,_2654435869 } ;

         }

     return

  _18337238202410394478.first ;

 }

std ::
 vector <

System ::

         _4118122444908280734 >

  System ::
_3473802998844434099 (
      Frame &_16940374161494853219,se3 &_13011065492167565582 ,const std ::

 set <
       uint32_t >

     &_16997249117545452056 )

  {
     if

   (

   _16940374161494853219.ids.size ()

    ==

0 )
   return {

  }

  ;

     if (
     _9098980761384425343 ->
TheKFDataBase.isEmpty ()

 )

 return {
       }
       ;

    vector <

 uint32_t >
        _5288382201172378343 =

 _9098980761384425343 ->

  relocalizationCandidates (
_16940374161494853219,_16997249117545452056 )

     ;
     if

 (

    _5288382201172378343.size ()

  ==

  0 )

   return {

 }
        ;

    vector <

System ::

   _4118122444908280734 > _1524129789187101628 (

  _5288382201172378343.size ()
    )

       ;

    FrameMatcher _16937386958649118140 ;

    _16937386958649118140.setParams ( _16940374161494853219,FrameMatcher ::

    MODE_ALL,_14938569619851839146.maxDescDistance*2 ) ;

#pragma omp parallel for
     for(

 int _175247762874 =

     0 ;

 _175247762874 <

   _5288382201172378343.size ()

   ;

      _175247762874 ++

      )
 {

         auto
_175247760268 = _5288382201172378343 [
_175247762874 ]

  ;

         auto
    &_3005399814901981436 =

  _9098980761384425343 ->

keyframes [

  _175247760268 ]

 ;

        _1524129789187101628 [

     _175247762874 ]

   ._6116114700730085677 =

   _16937386958649118140.match (
 _3005399814901981436,FrameMatcher ::

      MODE_ASSIGNED )

     ;

         for(

   auto &_2654435878:_1524129789187101628 [ _175247762874 ]

   ._6116114700730085677 )

   {

            std ::
     swap (
    _2654435878.queryIdx,_2654435878.trainIdx )

     ;

            _2654435878.trainIdx =
   _3005399814901981436.ids [

         _2654435878.trainIdx ]
  ;

         }

         for(

 int _2654435874 =

    0 ;

  _2654435874 < _1524129789187101628 [ _175247762874 ]
      ._6116114700730085677.size ()
    ;

   _2654435874 ++

      )

     {

             auto

&_175247759380 =
      _1524129789187101628 [

 _175247762874 ]

      ._6116114700730085677 [

_2654435874 ] .trainIdx ;

             if(

      !

    _9098980761384425343 ->

    map_points.is (

  _175247759380 ) )

                _1524129789187101628 [

    _175247762874 ]

       ._6116114700730085677 [

   _2654435874 ]

 .trainIdx =
-1 ;

             if(
   _9098980761384425343 ->

map_points [

_175247759380 ]

 .isBad ()

   )

                _1524129789187101628 [

  _175247762874 ]

  ._6116114700730085677 [

 _2654435874 ]
     .trainIdx =
     -1 ;

         }

        remove_unused_matches (

    _1524129789187101628 [
    _175247762874 ]

 ._6116114700730085677 )
      ;

         if

      (

     _1524129789187101628 [
    _175247762874 ]

    ._6116114700730085677.size ()

      <

25 ) continue ;

        _1524129789187101628 [

        _175247762874 ]

     ._3885067248075476027 =

   _3005399814901981436.pose_f2g ;

        PnPSolver ::

solvePnPRansac (
    _16940374161494853219,_9098980761384425343,_1524129789187101628 [

_175247762874 ]

._6116114700730085677,_1524129789187101628 [

_175247762874 ]

._3885067248075476027 )

    ;

          if
     (

   _1524129789187101628 [
       _175247762874 ]

  ._6116114700730085677.size ()
       <

 15 )

 continue ;

        _1524129789187101628 [
_175247762874 ]

 ._6116114700730085677 =

        _9098980761384425343 ->
 matchFrameToMapPoints (

 _9098980761384425343 ->

   TheKpGraph.getNeighborsVLevel2 (

     _175247760268,true )

  , _16940374161494853219, _1524129789187101628 [

        _175247762874 ]

   ._3885067248075476027 ,_14938569619851839146.maxDescDistance*2, 2.5,true )

      ;

         if

      (

     _1524129789187101628 [ _175247762874 ]

    ._6116114700730085677.size ()

 <

     30 )

     continue ;

        PnPSolver ::

    solvePnp (

  _16940374161494853219,_9098980761384425343,_1524129789187101628 [ _175247762874 ]

       ._6116114700730085677,_1524129789187101628 [
    _175247762874 ]
  ._3885067248075476027 )

 ;

          if

  (

 _1524129789187101628 [

 _175247762874 ]
    ._6116114700730085677.size ()
      <

   30 ) continue ;

        _1524129789187101628 [

   _175247762874 ]

  . _16902946305713852348 =

_16940374161494853219.ids ;

         for(
   auto _46082575882272165: _1524129789187101628 [

   _175247762874 ] ._6116114700730085677 )

            _1524129789187101628 [

   _175247762874 ]
       ._16902946305713852348 [

 _46082575882272165.queryIdx ]

      =

    _46082575882272165.trainIdx ;

     }

    std ::

 remove_if (

_1524129789187101628.begin ()

  ,_1524129789187101628.end ()

      , [
  ]

    (

 const _4118122444908280734 &_2654435866 )

     {

    return _2654435866._6116114700730085677.size ()

 <=
     30 ;

  }

   )

  ;

    std ::

       sort (
       _1524129789187101628.begin ()

         ,_1524129789187101628.end ()
      , [

 ]
        (

        const _4118122444908280734 &_2654435866,const _4118122444908280734 &_2654435867 )

 {

  return _2654435866._6116114700730085677.size ()

     >
       _2654435867._6116114700730085677.size ()

 ;

         }
   )
        ;

    return
 _1524129789187101628 ;

 }

 bool

 System ::

 _3570943890084999391 (

    Frame &_16940374161494853219,se3 &_13011065492167565582 , const std ::

set <

 uint32_t >

  &_16997249117545452056 )

   {

     auto
     _1524129789187101628 =

        _3473802998844434099 (
      _16940374161494853219,_13011065492167565582,_16997249117545452056 )

     ;

     if (

    _1524129789187101628.size () ==

         0 )

  return false ;

     if (
       _1524129789187101628 [

         0 ]
  ._6116114700730085677.size ()

  >

 30 )

      {

        _13011065492167565582 =

  _1524129789187101628 [

     0 ]

    ._3885067248075476027 ;

        _16940374161494853219.ids =
   _1524129789187101628 [

0 ]

    ._16902946305713852348 ;

         return

 true ;

     }

     else

   return false ;

 }

 bool

System ::

  _14569675007600066936 (

 Frame &_2654435871,se3 &_13011065492167565582 )
       {

      if

     (

_2654435871.markers.size ()

 ==

       0 )

 return false ;

    vector <
        uint32_t >

          _7895328205142007059 ;

     for( auto

 &_2654435878:_2654435871.markers )

    {

         auto

     _8332348524113911167 =

   _9098980761384425343 ->
       map_markers.find (

 _2654435878.id )

  ;

         if(
  _8332348524113911167 !=

_9098980761384425343 -> map_markers.end ()
   )

             if

  (

    _8332348524113911167 ->

  second.pose_g2m.isValid ()

       )

                _7895328205142007059.push_back (
 _2654435878.id )

    ;

     }

     if
    (
 _7895328205142007059.size ()

          ==
      0 )

  return false ;

  _13011065492167565582 =
     _9098980761384425343 ->

     getBestPoseFromValidMarkers (

     _2654435871,_7895328205142007059,_14938569619851839146.aruco_minerrratio_valid )

    ;

   return

     _13011065492167565582.isValid ()

   ;

 }

  bool
  System ::

 _16487919888509808279 (

 Frame &_2654435871, se3 &_13011065492167565582 )
 {

    _13011065492167565582 =

     se3 ()

      ;

     if(

     _14938569619851839146.reLocalizationWithMarkers )

 {

         if

      (

      _14569675007600066936 (

     _2654435871,_13011065492167565582 )

     )
       return

true ;

     }

     if(

  _14938569619851839146.reLocalizationWithKeyPoints )
  {

         if
  (

      _3570943890084999391 (

_2654435871,_13011065492167565582 ) ) return

     true ;

     }

     return

       false

      ;

 }

std ::
   vector <

    cv ::

 DMatch >

     System ::

_11946837405316294395 (

     Frame & _16940374161810747371, Frame &_5918541169384278026, float

         _1686565542397313973, float
  _4500031049790251086 )

 {

    std :: vector <

  cv ::

   DMatch >

   _6807036698572949990 ;

     for(

    size_t _2654435874 =

  0 ;

 _2654435874 < _5918541169384278026.ids.size ()

 ;

 _2654435874 ++

  )

      {

         uint32_t
 _11093822294347 =

  _5918541169384278026.ids [
       _2654435874 ]

       ;

         if
   (

   _11093822294347 != std ::

     numeric_limits <

    uint32_t > :: max () )

   {

             if(

       _9098980761384425343 ->

      map_points.is (
_11093822294347 )

     )

  {

                MapPoint &_3005399799907669332 = _9098980761384425343 ->

  map_points [

   _11093822294347 ]
  ;

                 if

  (

    _3005399799907669332.isBad ()
   )

         continue ;

                 auto

   _11093822300120 =
   _16940374161810747371.project (

_3005399799907669332.getCoordinates ()

,true,true ) ;

                 if

      (

      isnan (

 _11093822300120.x ) )

    continue ;

                 float
     _175247759755 =

 _16940374161810747371.scaleFactors [ _5918541169384278026.und_kpts [

 _2654435874 ]

     .octave ]

   ;

                 int

_3005399801676750422 =

_5918541169384278026.und_kpts [

 _2654435874 ]
      .octave ;

                std ::

       vector <

    uint32_t >

      _10924592426265627429 =
       _16940374161810747371.getKeyPointsInRegion (
       _11093822300120,_4500031049790251086*_175247759755,_3005399801676750422,_3005399801676750422 ) ;

                 float
  _16940367568811467085 =

_1686565542397313973+0.01,_16992066385107317811 =

std ::

    numeric_limits <

 float >

     ::

   max ()

   ;

                 uint32_t
    _6806984971934960832 =

  std ::
       numeric_limits <

     uint32_t > ::

max () ;

                 for(
   auto _175247760278:_10924592426265627429 )
  {

                     if

      (
      _16940374161810747371.und_kpts [

    _175247760278 ]

.octave ==

    _5918541169384278026.und_kpts [ _2654435874 ]

    .octave )

 {

                         float

   _16940392174182767813 = MapPoint ::
     getDescDistance (
  _5918541169384278026.desc,_2654435874, _16940374161810747371.desc,_175247760278 )

     ;

                         if

  (

     _16940392174182767813 <

       _16940367568811467085 )

        {

                            _16940367568811467085 =

    _16940392174182767813 ;

                            _6806984971934960832 =

    _175247760278 ;
                         }

                         else

 if

      (

   _16940392174182767813 <
   _16992066385107317811 ) {

                            _16992066385107317811 =

 _16940392174182767813 ;

                         }

                     }

                 }

                 if
   (

_6806984971934960832 !=

  std ::

 numeric_limits <
       uint32_t >

    ::

        max ()

      &&
       _16940367568811467085 <

   0.7*_16992066385107317811 )

    {

                    cv ::

        DMatch _175247759376 ;

                    _175247759376.queryIdx =

    _6806984971934960832 ;

                    _175247759376.trainIdx =

     _3005399799907669332.id ;

                    _175247759376.distance =

          _16940367568811467085 ;

                    _6807036698572949990.push_back (

 _175247759376 )

        ;

                 }

             }

         }

     }

    filter_ambiguous_query (

_6807036698572949990 )

  ;

     return

     _6807036698572949990 ;

 }

se3 System ::

    _11166622111371682966 (

   Frame &_16940374161810747371,se3 _14387478432460351890 )

           {

    std ::

    vector <

   cv :: DMatch >

   _637068542992099399 ;

    se3 _5769551021164122736 =

  _14387478432460351890 ;

      if

     (

         _9098980761384425343 ->

 map_points.size ()

     >

  0 )

    {

          if

     ( !

 _14463320619150402643.empty ()

 )

             _5769551021164122736 =

 _14463320619150402643*_5769551021164122736.convert () ;

        _16940374161810747371.pose_f2g =

   _5769551021164122736 ;

        _637068542992099399 =

    _11946837405316294395 (

        _16940374161810747371,_4913157516830781457,_14938569619851839146.maxDescDistance*1.5,_14938569619851839146.projDistThr )

  ;

         int

     _9870110657242862171 =

       0 ;

         if

   (

   _637068542992099399.size ()

 >

    30 )
      {

             auto

         _14671559813105454070 =

  _5769551021164122736 ;

            _9870110657242862171 =

  PnPSolver :: solvePnp (

     _16940374161810747371,_9098980761384425343,_637068542992099399,_14671559813105454070,_10576739190144361304 )

 ;

             if

    (

    _9870110657242862171 > 30 )

   _5769551021164122736 =

   _14671559813105454070 ;

         }

        else {

            FrameMatcher _16997326787393468537 ( FrameMatcher ::
       TYPE_FLANN )

      ;

            _16997326787393468537.setParams (

    _9098980761384425343 ->

    keyframes [ _10576739190144361304 ]
,FrameMatcher ::

  MODE_ASSIGNED,_14938569619851839146.maxDescDistance*2,0.6,true,3 )

    ;

            _637068542992099399 =

  _16997326787393468537.match (

_16940374161810747371,FrameMatcher ::

      MODE_ALL )

      ;

             if(

     _637068542992099399.size ()

    >

30 )

   {

                 for(

    auto &_2654435878:_637068542992099399 )

                    _2654435878.trainIdx =
  _9098980761384425343 ->

   keyframes [
     _10576739190144361304 ]

  .ids [
 _2654435878.trainIdx ] ;

                 auto

 _14671559813105454070 =

   _5769551021164122736 ;

                _9870110657242862171 = PnPSolver :: solvePnp (

 _16940374161810747371,_9098980761384425343,_637068542992099399,_14671559813105454070,_10576739190144361304 )
 ;

                 if

       (

 _9870110657242862171 >

30 )

   _5769551021164122736 =

    _14671559813105454070 ;

             }

             else

   _9870110657242862171 =
 0 ;

         }

         float

   _3763415994652820314 ;

         if

   (

  _9870110657242862171 >
      30 ) {

            _3763415994652820314 =

4 ;

             for(

         auto _2654435878: _637068542992099399 )

     {

                _9098980761384425343 ->

    map_points [

_2654435878.trainIdx ]

  .lastFIdxSeen =

  _16940374161810747371.fseq_idx ;

                _9098980761384425343 ->

     map_points [
 _2654435878.trainIdx ]
.setVisible () ;
             }

         }

        else {

            _637068542992099399.clear ()

 ;

            _3763415994652820314 =

    _14938569619851839146.projDistThr ;

         }

         auto

  _3521005873836563963 =
 _9098980761384425343 ->

    matchFrameToMapPoints (
 _9098980761384425343 ->

   TheKpGraph.getNeighborsVLevel2 (
  _10576739190144361304,true )

  , _16940374161810747371, _5769551021164122736 ,_14938569619851839146.maxDescDistance*2, _3763415994652820314,true ) ;

        _637068542992099399.insert (
     _637068542992099399.end ()

,_3521005873836563963.begin ()

 ,_3521005873836563963.end ()

   )

     ;

        filter_ambiguous_query (

_637068542992099399 )
     ;

     }

      int _8650310500205049352 =

     PnPSolver ::

 solvePnp (

    _16940374161810747371,_9098980761384425343,_637068542992099399,_5769551021164122736,_10576739190144361304 )

  ;

     bool

 _6535949166237672095 = false ;

     if

    (
  _16940374161810747371.markers.size ()

 >

 0 )

   {

         int

        _9870110666330890270 =

    0 ;

         for(
 size_t _2654435874 =

  0 ;

 _2654435874 <

   _16940374161810747371.markers.size ()

    ;

   _2654435874 ++

    ) {

             auto _11093822290813 =
 _9098980761384425343 ->

     map_markers.find (

  _16940374161810747371.markers [

 _2654435874 ] .id )
 ;

             if(

 _11093822290813 ==
      _9098980761384425343 ->
       map_markers.end ()
 )

    continue ;

             if

     (

          !

  _11093822290813 ->

         second.pose_g2m.isValid ()

   )

   continue ;
            _9870110666330890270 ++

  ;

             if

     (

     _16940374161810747371.markers [

   _2654435874 ]

   .poses.err_ratio <

        _14938569619851839146.aruco_minerrratio_valid )

      continue ;

            _6535949166237672095 =

    true ;

            break ;
         }

         if

  (

    _9870110666330890270 >

   1 )

 _6535949166237672095 = true ;

     }

     if

     (

    _8650310500205049352 <

      30 &&

       !

_6535949166237672095 )

    {

      return

   se3 () ;

     }

     for(

    size_t _2654435874 =
       0 ;

  _2654435874 <

   _637068542992099399.size () ;
   _2654435874 ++
        )

          {

            _9098980761384425343 -> map_points [

_637068542992099399 [ _2654435874 ]

   .trainIdx ]

.setSeen ()

     ;

            _16940374161810747371.ids [

       _637068542992099399 [

      _2654435874 ]

 .queryIdx ]

      =

_637068542992099399 [

    _2654435874 ] .trainIdx ;

             if

    (

   _637068542992099399 [

   _2654435874 ] .imgIdx ==

       -1 )

                _16940374161810747371.flags [

     _637068542992099399 [

   _2654435874 ]
     .queryIdx ]

.set (

Frame :: FLAG_OUTLIER,true )

 ;

     }

     return

 _5769551021164122736 ;
 }

 void

    System ::

 _14031550457846423181 (
        cv ::
      Mat &_46082544231248938, float

    _9971115036363993554 )

   const {

     int

         _706246330297760 =

float (

 _46082544231248938.cols )

 /640.f ;

    cv ::

    Point2f _46082575822903876 (
 _706246330297760,_706246330297760 )
       ;

     bool

    _16987668682974831349 =

false ;

      if
  (

       _3857178690860967008 ==
      STATE_TRACKING )
 {

         for(

        size_t _2654435874 =

    0 ;

  _2654435874 <

    _14938569046430841631.ids.size ()

 ;

     _2654435874 ++

     )

             if

   (

   _14938569046430841631.ids [

     _2654435874 ]

  !=

 std ::

     numeric_limits <

    uint32_t >
  ::

max ()

    )

   {

                 if

  (

    !

     _9098980761384425343 ->
       map_points.is (

   _14938569046430841631.ids [

_2654435874 ]

     )

    )
        continue ;

                cv ::
 Scalar _46082574599890393 (

   0,255,0 )

    ;

                 if

    (

    !
    _9098980761384425343 ->

  map_points [ _14938569046430841631.ids [

 _2654435874 ]

   ]

  .isStable ()

     )

  {

 _46082574599890393 =
     cv ::

   Scalar (
  0,0,255 )
 ;

      }

                cv ::

   rectangle (

    _46082544231248938,_9971115036363993554* (
 _14938569046430841631.kpts [ _2654435874 ]

  -_46082575822903876 ) ,_9971115036363993554* (

    _14938569046430841631.kpts [
 _2654435874 ]

    +_46082575822903876 )

   ,_46082574599890393,_706246330297760 )

 ;

             }

             else
 if(

         _16987668682974831349 )
     {

                cv ::
  Scalar _46082574599890393 (

 255,0,0 )
    ;

                cv ::

rectangle (

         _46082544231248938,_9971115036363993554* (

_14938569046430841631.kpts [

     _2654435874 ]

-_46082575822903876 )

    ,_9971115036363993554* ( _14938569046430841631.kpts [
       _2654435874 ]

 +_46082575822903876 ) ,_46082574599890393,_706246330297760 )
      ;
             }

     }

     else

     if(

    _9098980761384425343 ->

      isEmpty ()

     )

 {

         for(

   auto

  _2654435881: _14938569046430841631.kpts )

            cv ::

  rectangle ( _46082544231248938,_9971115036363993554* (

        _2654435881-_46082575822903876 )
 ,_9971115036363993554* (

        _2654435881+_46082575822903876 )
    ,cv ::
       Scalar (

255,0,0 )

 ,_706246330297760 ) ;

     }

     for(

auto _5221496220235804833:_14938569046430841631.markers )

   {

        cv ::

   Scalar _46082574599890393 =

 cv ::

Scalar (

 0,244,0 )
      ;

         if(
     _9098980761384425343 ->

map_markers.count ( _5221496220235804833.id )
   !=

0 )

 {

             if(

  _9098980761384425343 ->

 map_markers.at (

      _5221496220235804833.id )
    .pose_g2m.isValid ()

    )

                _46082574599890393 =

cv ::

   Scalar (

 255,0,0 )

    ;

            else
                _46082574599890393 =
      cv ::

         Scalar (

   0,0,255 )

   ;

         }

         for(

 auto &_2654435881:_5221496220235804833.corners ) _2654435881 *=

      _9971115036363993554 ;

         for( auto &_2654435881:_5221496220235804833.und_corners )

 _2654435881 *=

   _9971115036363993554 ;

        _5221496220235804833.draw (
_46082544231248938,_46082574599890393 )

    ;

     }

 }

 void

  System ::

    globalOptimization ()

    {

     auto

     _11093822300040 =

 GlobalOptimizer ::
     create (

    _14938569619851839146.global_optimizer )

  ;

    GlobalOptimizer ::

         ParamSet _3005399798454910266 (

   debug ::

 Debug ::

       getLevel ()
     >=

11 )

        ;

    _3005399798454910266.fixFirstFrame =

  true ;

    _3005399798454910266.nIters =

     10 ;

    _3005399798454910266.markersOptWeight =

     getParams ()
.markersOptWeight ;

    _3005399798454910266.minMarkersForMaxWeight =

 getParams ()

  .minMarkersForMaxWeight ;

    _3005399798454910266.InPlaneMarkers =

    getParams ()

   .inPlaneMarkers ;
    _11093822300040 ->

  optimize (
  _9098980761384425343,_3005399798454910266 )

 ;

    _9098980761384425343 ->

removeBadAssociations (

   _11093822300040 ->

  getBadAssociations ()
      ,2 )

 ;

 }
 uint32_t

 System ::

getLastProcessedFrame ()

    const {

    return _14938569046430841631.fseq_idx ;

  }

 void System ::

  setMode (

     MODES _706246332824366 )

          {

    _17450466964482625197 =

       _706246332824366 ;

 }

void System::clear(){
  _2869602498954317713 = std::make_shared<MapManager>();
  _13028158409047949416 = false ;

  _3857178690860967008 = STATE_LOST ;
  _9098980761384425343.reset () ;

  _2044193291895307872 = std :: make_shared <MapInitializer>();
  _14463320619150402643 = cv :: Mat ();
  _10558050725520398793 = -1 ;
}

  void System ::

saveToFile (

   string _16997227483604144380 )

      {

     waitForFinished ()

     ;

     fstream _706246330143775 (

_16997227483604144380,ios_base ::

       binary|ios_base :: out )

    ;

      if(

      !

    _706246330143775 )

     throw std ::

runtime_error ( string (
    __PRETTY_FUNCTION__ )

  +"\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x70\x65\x6e\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x20\x77\x72\x69\x74\x69\x6e\x67\x3a"+_16997227483604144380 )

       ;

     io_write <

  uint64_t >

 (

    182313,_706246330143775 )
  ;

     _9098980761384425343 ->

         toStream (

_706246330143775 )

  ;

     _14938569619851839146.toStream (

  _706246330143775 )

 ;

     _706246330143775.write (
 (

     char* )

  &_17976495724303689842,sizeof (

_17976495724303689842 )

       )

     ;

     _706246330143775.write (

 (
  char* )

&_10576739190144361304,sizeof (

 _10576739190144361304 )

     )

      ;

     _706246330143775.write (
 (

   char* )

&_13028158409047949416,sizeof (

    _13028158409047949416 )

    )

 ;

     _706246330143775.write (
  (

      char* )

  &_3857178690860967008,sizeof (

    _3857178690860967008 )
        ) ;

     _706246330143775.write (

          (

   char* )

 &_17450466964482625197,sizeof (

     _17450466964482625197 )

      )

     ;

     _14938569046430841631.toStream (

_706246330143775 )

      ;

     _4913157516830781457.toStream (

  _706246330143775 )

     ;
     _3944249282595574931 ->

  toStream (

     _706246330143775 )

  ;

     _2869602498954317713 ->

   toStream (
     _706246330143775 )

      ;

     _1320287184975591154 ->

    toStream (
    _706246330143775 )

   ;

     toStream__ (

 _14463320619150402643,_706246330143775 )
  ;

     _706246330143775.write (

 (
    char* )

&_10558050725520398793,sizeof (
_10558050725520398793 )

        )

 ;

     _706246330143775.write (

     (

         char* )

     &_13033649816026327368,sizeof (

  _13033649816026327368 )

  )

  ;

     _706246330143775.flush ()

 ;

  }

  void

    System ::
 readFromFile (

 string _16997227483604144380 )

        {

     ifstream _706246330143775 (

     _16997227483604144380,ios ::

    binary ) ;

      if(

          !

     _706246330143775 )
 throw std ::

  runtime_error (

  string (

  __PRETTY_FUNCTION__ ) +"\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x70\x65\x6e\x20\x66\x69\x6c\x65\x20\x66\x6f\x72\x20\x72\x65\x61\x64\x69\x6e\x67\x3a"+_16997227483604144380 )
       ;

      if
  (

 io_read <

       uint64_t >

 (

         _706246330143775 )

      != 182313 )

       throw std ::
       runtime_error (

       string ( __PRETTY_FUNCTION__ )

  +"\x69\x6e\x76\x61\x6c\x69\x64\x20\x66\x69\x6c\x65\x20\x74\x79\x70\x65\x3a"+_16997227483604144380 )

  ;

     _9098980761384425343 =

   std ::

make_shared <

  Map >

     ()

     ;

     _9098980761384425343 ->

    fromStream (

       _706246330143775 )

    ;

     _14938569619851839146.fromStream (
       _706246330143775 )

 ;

      _706246330143775.read (

 (

  char* )
 &_17976495724303689842,sizeof (

_17976495724303689842 )

  )

   ;

     _706246330143775.read (
       (

    char* )

&_10576739190144361304,sizeof (

    _10576739190144361304 )

   )

   ;

     _706246330143775.read (

      ( char* )

 &_13028158409047949416,sizeof (

  _13028158409047949416 )

  )
   ;

     _706246330143775.read (

     (
    char* ) &_3857178690860967008,sizeof (
       _3857178690860967008 ) ) ;

     _706246330143775.read (

   (

  char* )

    &_17450466964482625197,sizeof (

 _17450466964482625197 )

  )

         ;

     _14938569046430841631.fromStream (

       _706246330143775 )

         ;

     _4913157516830781457.fromStream (

_706246330143775 )

   ;

     _3944249282595574931 ->

      fromStream (

   _706246330143775 )

    ;

     _2869602498954317713 -> fromStream (

  _706246330143775 ) ;

     _1320287184975591154 ->

fromStream (

  _706246330143775 )

 ;

     fromStream__ (

  _14463320619150402643,_706246330143775 )

       ;

     _706246330143775.read (

     (

 char* )

        &_10558050725520398793,sizeof (
   _10558050725520398793 )

  )
     ;

     _706246330143775.read (
        (
  char* )

      &_13033649816026327368,sizeof ( _13033649816026327368 )
   )

    ;

  }

  }