#include <iostream>
#include "ts_plane_tag.hh"
#include "ts_timber.hh"

#include <Eigen/Core>

#include <iostream>
#include <fstream>
#include <sstream>

#include <stdexcept>

#include <open3d/Open3D.h>

// test files in https://drive.google.com/drive/folders/1wYFZq54syWwTFVQ5soJTMVUmcufcvQoT?usp=share_link
// if you have problem installing open3d:
// missing libc++ --> sudo apt install clang lldb lld


/*
[1] import and parse the yaml files into a vector of planeTags
[2] display those planeTags in a 3d window
*/


int main()
{
    const std::string FILENAME = "/home/as/TSlam/src/reconstruction/long_comb.yml";

    tslam::TSTimber timber = tslam::TSTimber();
    timber.setPlaneTagsFromYAML(FILENAME);
    // std::vector<std::shared_ptr<tslam::TSPlaneTag>> planeTags;
    // tslam::TSPlaneTag::parseFromMAPYAML(FILENAME, planeTags);


    //---------------------------------------------------------------------------------
    // Reconstruction
    //---------------------------------------------------------------------------------

    /* reconstruct algorithm
    ref1: polyFit (https://github.com/LiangliangNan/PolyFit)
    --- there is a licensed geometric solver Gurobi, this is not free and 
    we want to find another solution;

    Inspired by polyfit
    // 00. group the tags first(?)
    1. clip supporting planes with boundary box generated by all points (Open3d::bbox)
    0. create mesh planes scaled by 10e1000


    2. (refinement) merging similar planes (a: by proximity, b: by angle)

    3. intersection of planes

    4. selection of candidate rectangles (inbound points? might not be sufficient, we need to find an
    additional way to reinforce the selection of the candidate rectangles)

    5. join the rectangles to a polygon mesh
    5. check for  mesh sanity

    */

    std::cout << "[DEBUG]: generting mesh planes from planeTags" << std::endl;
    // add a timer
    auto start = std::chrono::system_clock::now();

    // std::vector<open3d::geometry::TriangleMesh> meshPlanes;
    // for (auto& p : timber.getPlaneTags())
    // {
    //     open3d::geometry::TriangleMesh mPln = p->getOpen3dMesh();
    //     // scale the mesh plane in its plane normal direction
    //     // mPln.Scale(1, p->getUnorientedPlaneNormal());
    //     mPln.Scale(1, p->getUnorientedPlaneNormal());
    // }

    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds = end-start;
    std::cout << "[DEBUG]: elapsed time: " << elapsed_seconds.count() << " s" << std::endl;


    //---------------------------------------------------------------------------------
    // Debug visualizer
    //---------------------------------------------------------------------------------

    open3d::visualization::Visualizer* vis(new open3d::visualization::Visualizer());
    vis->CreateVisualizerWindow("TSPlaneTags", 1920, 1080);

    //TODO: add numbers to visualization

    // draw plane tags as wireframe
    for (auto& tag : timber.getPlaneTags())
    {
        open3d::geometry::TriangleMesh tagScaleUp = tag->getOpen3dMesh();
        auto planeTagsLineset1 = open3d::geometry::LineSet::CreateFromTriangleMesh(tagScaleUp);
        planeTagsLineset1->PaintUniformColor(Eigen::Vector3d(1, 1, 0.2));
        vis->AddGeometry(planeTagsLineset1);


        // scale the mesh plane in its plane normal direction
        // tagScaleUp.Scale(10, tag->getUnorientedPlaneNormal());
        tagScaleUp.Scale(10, tag->getCenter());





        auto planeTagsLineset2 = open3d::geometry::LineSet::CreateFromTriangleMesh(tagScaleUp);
        planeTagsLineset2->PaintUniformColor(Eigen::Vector3d(0, 1, 0.2));

        vis->AddGeometry(planeTagsLineset2);
    }

    vis->Run();
    vis->Close();
    vis->DestroyVisualizerWindow();

    return 0;
}