#include <iostream>
#include "ts_plane_tag.hh"
#include "ts_timber.hh"

#include <Eigen/Core>

#include <iostream>
#include <fstream>
#include <sstream>

#include <stdexcept>

#include <open3d/Open3D.h>

// test files in https://drive.google.com/drive/folders/1wYFZq54syWwTFVQ5soJTMVUmcufcvQoT?usp=share_link
// if you have problem installing open3d:
// missing libc++ --> sudo apt install clang lldb lld


/*
[1] import and parse the yaml files into a vector of planeTags
[2] display those planeTags in a 3d window
*/


open3d::geometry::TriangleMesh cropMeshPlaneByOBB(open3d::geometry::TriangleMesh& plane, open3d::geometry::OrientedBoundingBox o3dOBB)
{
    open3d::geometry::TriangleMesh cropedPlaneMesh;
    std::vector<Eigen::Vector3d> OBBpts = o3dOBB.GetBoxPoints();

    // get lines of the OBB from Open3d structure
    ///      ------- x
    ///     /|
    ///    / |
    ///   /  | z
    ///  y
    ///      0 ------------------- 1
    ///       /|                /|
    ///      / |               / |
    ///     /  |              /  |
    ///    /   |             /   |
    /// 2 ------------------- 7  |
    ///   |    |____________|____| 6
    ///   |   /3            |   /
    ///   |  /              |  /
    ///   | /               | /
    ///   |/                |/
    /// 5 ------------------- 4
    std::vector<Eigen::Vector3d> OBBlines;
    OBBlines.push_back(OBBpts[0] - OBBpts[1]);
    OBBlines.push_back(OBBpts[1] - OBBpts[7]);
    OBBlines.push_back(OBBpts[7] - OBBpts[2]);
    OBBlines.push_back(OBBpts[2] - OBBpts[0]);

    OBBlines.push_back(OBBpts[0] - OBBpts[3]);
    OBBlines.push_back(OBBpts[1] - OBBpts[6]);
    OBBlines.push_back(OBBpts[2] - OBBpts[5]);
    OBBlines.push_back(OBBpts[7] - OBBpts[4]);

    OBBlines.push_back(OBBpts[3] - OBBpts[6]);
    OBBlines.push_back(OBBpts[6] - OBBpts[4]);
    OBBlines.push_back(OBBpts[4] - OBBpts[5]);
    OBBlines.push_back(OBBpts[5] - OBBpts[3]);

    // TODO: this has probably to be replaced by a tagplane object (not using open3d mesh as input)
    // intersect each lien with the plane
    std::cout << "plane vertices" << std::to_string(plane.vertices_.size()) << std::endl;





    


    

    return cropedPlaneMesh;
}


int main()
{
    const std::string FILENAME = "/home/as/TSlam/src/reconstruction/long_comb.yml";

    tslam::TSTimber timber = tslam::TSTimber();
    timber.setPlaneTagsFromYAML(FILENAME);
    // std::vector<std::shared_ptr<tslam::TSPlaneTag>> planeTags;
    // tslam::TSPlaneTag::parseFromMAPYAML(FILENAME, planeTags);


    //---------------------------------------------------------------------------------
    // Reconstruction
    //---------------------------------------------------------------------------------

    /* reconstruct algorithm
    ref1: polyFit (https://github.com/LiangliangNan/PolyFit)
    --- there is a licensed geometric solver Gurobi, this is not free and 
    we want to find another solution;

    Inspired by polyfit
    // 00. group the tags first(?)
    1. clip supporting planes with boundary box generated by all points (Open3d::bbox)
    0. create mesh planes scaled by 10e1000


    2. (refinement) merging similar planes (a: by proximity, b: by angle)

    3. intersection of planes

    4. selection of candidate rectangles (inbound points? might not be sufficient, we need to find an
    additional way to reinforce the selection of the candidate rectangles)

    5. join the rectangles to a polygon mesh
    5. check for  mesh sanity

    */

    //---------------------------------------------------------------------------------
    // Scale up planes
    //---------------------------------------------------------------------------------

    std::cout << "[DEBUG]: generting mesh planes from planeTags" << std::endl;                   // DEBUG
    auto start1 = std::chrono::high_resolution_clock::now();                                    // DEBUG
    // >>>> start code >>>>

    const uint SCALE_PLN_FACTOR = 500;

    std::vector<open3d::geometry::TriangleMesh> meshPlnsScaledUp;
    for (auto& p : timber.getPlaneTags())
    {
        open3d::geometry::TriangleMesh mPln = p->getOpen3dMesh();
        mPln.Scale(SCALE_PLN_FACTOR, p->getCenter());
        meshPlnsScaledUp.push_back(mPln);
    }

    // <<<< end code <<<<
    auto end1 = std::chrono::system_clock::now();                                               // DEBUG
    std::chrono::duration<double> elapsed_seconds1 = end1-start1;                              // DEBUG
    std::cout << "[DEBUG]: elapsed time: " << elapsed_seconds1.count() << " s" << std::endl;  // DEBUG


    //---------------------------------------------------------------------------------
    // Cropping planes
    //---------------------------------------------------------------------------------

    std::cout << "[DEBUG]: generting mesh planes from planeTags" << std::endl;                   // DEBUG
    auto start2 = std::chrono::high_resolution_clock::now();                                    // DEBUG
    // >>>> start code >>>>

    // get all the tag's center points in a point cloud, get its obb, scale it to half the scalePlnF and crop the planes
    open3d::geometry::PointCloud pntCld;
    for (auto& p : timber.getPlaneTags())
    {
        pntCld.points_.push_back(p->getCenter());
    }

    const double SCALE_OBB_FACTOR = 2.0;  // const
    open3d::geometry::OrientedBoundingBox obb = pntCld.GetOrientedBoundingBox();
    Eigen::Vector3d obbCenter = obb.GetCenter();
    obb.Scale(SCALE_OBB_FACTOR, obbCenter);

    std::vector<open3d::geometry::TriangleMesh> meshPlnsCrop;
    for (auto& plnF : meshPlnsScaledUp)
    {
        // open3d::geometry::TriangleMesh test = *plnF.Crop(obb);

        open3d::geometry::TriangleMesh test = cropMeshPlaneByOBB(plnF, obb);



        
        meshPlnsCrop.push_back(test);
    }


    // <<<< end code <<<<
    auto end2 = std::chrono::system_clock::now();                                               // DEBUG
    std::chrono::duration<double> elapsed_seconds2 = end2-start2;                              // DEBUG
    std::cout << "[DEBUG]: elapsed time: " << elapsed_seconds2.count() << " s" << std::endl;  // DEBUG


    //##################################################################################
    // Debug visualizer
    //---------------------------------------------------------------------------------

    open3d::visualization::Visualizer* vis(new open3d::visualization::Visualizer());
    vis->CreateVisualizerWindow("TSPlaneTags", 1920, 1080);

    // draw base plane tags as wireframe
    for (auto& tag : timber.getPlaneTags())
    {
        open3d::geometry::TriangleMesh tagBase = tag->getOpen3dMesh();
        auto planeTagsLineset1 = open3d::geometry::LineSet::CreateFromTriangleMesh(tagBase);
        planeTagsLineset1->PaintUniformColor(Eigen::Vector3d(1, 1, 0.2));
        vis->AddGeometry(planeTagsLineset1);
    }

    // // draw base scaled up tags as wireframe
    // for (auto& tag : timber.getPlaneTags())
    // {
    //     open3d::geometry::TriangleMesh tagScaledUp = tag->getOpen3dMesh();

    //     tagScaledUp.Scale(500, tag->getCenter());

    //     auto planeTagsLineset2 = open3d::geometry::LineSet::CreateFromTriangleMesh(tagScaledUp);
    //     planeTagsLineset2->PaintUniformColor(Eigen::Vector3d(0, 1, 0.2));
    //     vis->AddGeometry(planeTagsLineset2);
    // }

    // add bounding box
    auto obbLineset = open3d::geometry::LineSet::CreateFromOrientedBoundingBox(obb);
    obbLineset->PaintUniformColor(Eigen::Vector3d(1, 0, 0));
    vis->AddGeometry(obbLineset);

    // draw scaled and cropped planes
    for (auto& pln : meshPlnsCrop)
    {
        auto planeTagsLineset3 = open3d::geometry::LineSet::CreateFromTriangleMesh(pln);
        planeTagsLineset3->PaintUniformColor(Eigen::Vector3d(0, 0, 1));
        vis->AddGeometry(planeTagsLineset3);
    }

    vis->Run();
    vis->Close();
    vis->DestroyVisualizerWindow();

    return 0;
}